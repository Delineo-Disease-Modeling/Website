{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _decimal = _interopRequireDefault(require(\"decimal.js-light\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * @fileOverview 一些公用的运算方法\r\n * @author xile611\r\n * @date 2015-09-17\r\n */\n\n/**\r\n * 获取数值的位数\r\n * 其中绝对值属于区间[0.1, 1)， 得到的值为0\r\n * 绝对值属于区间[0.01, 0.1)，得到的位数为 -1\r\n * 绝对值属于区间[0.001, 0.01)，得到的位数为 -2\r\n *\r\n * @param  {Number} value 数值\r\n * @return {Integer} 位数\r\n */\n\n\nfunction getDigitCount(value) {\n  var result;\n\n  if (value === 0) {\n    result = 1;\n  } else {\n    result = Math.floor(new _decimal.default(value).abs().log(10).toNumber()) + 1;\n  }\n\n  return result;\n}\n/**\r\n * 按照固定的步长获取[start, end)这个区间的数据\r\n * 并且需要处理js计算精度的问题\r\n *\r\n * @param  {Decimal} start 起点\r\n * @param  {Decimal} end   终点，不包含该值\r\n * @param  {Decimal} step  步长\r\n * @return {Array}         若干数值\r\n */\n\n\nfunction rangeStep(start, end, step) {\n  var num = new _decimal.default(start);\n  var i = 0;\n  var result = []; // magic number to prevent infinite loop\n\n  while (num.lt(end) && i < 100000) {\n    result.push(num.toNumber());\n    num = num.add(step);\n    i++;\n  }\n\n  return result;\n}\n/**\r\n * 对数值进行线性插值\r\n *\r\n * @param  {Number} a  定义域的极点\r\n * @param  {Number} b  定义域的极点\r\n * @param  {Number} t  [0, 1]内的某个值\r\n * @return {Number}    定义域内的某个值\r\n */\n\n\nvar interpolateNumber = (0, _utils.curry)(function (a, b, t) {\n  var newA = +a;\n  var newB = +b;\n  return newA + t * (newB - newA);\n});\n/**\r\n * 线性插值的逆运算\r\n *\r\n * @param  {Number} a 定义域的极点\r\n * @param  {Number} b 定义域的极点\r\n * @param  {Number} x 可以认为是插值后的一个输出值\r\n * @return {Number}   当x在 a ~ b这个范围内时，返回值属于[0, 1]\r\n */\n\nvar uninterpolateNumber = (0, _utils.curry)(function (a, b, x) {\n  var diff = b - +a;\n  diff = diff || Infinity;\n  return (x - a) / diff;\n});\n/**\r\n * 线性插值的逆运算，并且有截断的操作\r\n *\r\n * @param  {Number} a 定义域的极点\r\n * @param  {Number} b 定义域的极点\r\n * @param  {Number} x 可以认为是插值后的一个输出值\r\n * @return {Number}   当x在 a ~ b这个区间内时，返回值属于[0, 1]，\r\n * 当x不在 a ~ b这个区间时，会截断到 a ~ b 这个区间\r\n */\n\nvar uninterpolateTruncation = (0, _utils.curry)(function (a, b, x) {\n  var diff = b - +a;\n  diff = diff || Infinity;\n  return Math.max(0, Math.min(1, (x - a) / diff));\n});\nvar _default = {\n  rangeStep: rangeStep,\n  getDigitCount: getDigitCount,\n  interpolateNumber: interpolateNumber,\n  uninterpolateNumber: uninterpolateNumber,\n  uninterpolateTruncation: uninterpolateTruncation\n};\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/totti/Documents/jhu class/delineo/Website/model_app/frontend/node_modules/recharts-scale/lib/util/arithmetic.js"],"names":["Object","defineProperty","exports","value","default","_decimal","_interopRequireDefault","require","_utils","obj","__esModule","getDigitCount","result","Math","floor","abs","log","toNumber","rangeStep","start","end","step","num","i","lt","push","add","interpolateNumber","curry","a","b","t","newA","newB","uninterpolateNumber","x","diff","Infinity","uninterpolateTruncation","max","min","_default"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _decimal = _interopRequireDefault(require(\"decimal.js-light\"));\r\n\r\nvar _utils = require(\"./utils\");\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * @fileOverview 一些公用的运算方法\r\n * @author xile611\r\n * @date 2015-09-17\r\n */\r\n\r\n/**\r\n * 获取数值的位数\r\n * 其中绝对值属于区间[0.1, 1)， 得到的值为0\r\n * 绝对值属于区间[0.01, 0.1)，得到的位数为 -1\r\n * 绝对值属于区间[0.001, 0.01)，得到的位数为 -2\r\n *\r\n * @param  {Number} value 数值\r\n * @return {Integer} 位数\r\n */\r\nfunction getDigitCount(value) {\r\n  var result;\r\n\r\n  if (value === 0) {\r\n    result = 1;\r\n  } else {\r\n    result = Math.floor(new _decimal.default(value).abs().log(10).toNumber()) + 1;\r\n  }\r\n\r\n  return result;\r\n}\r\n/**\r\n * 按照固定的步长获取[start, end)这个区间的数据\r\n * 并且需要处理js计算精度的问题\r\n *\r\n * @param  {Decimal} start 起点\r\n * @param  {Decimal} end   终点，不包含该值\r\n * @param  {Decimal} step  步长\r\n * @return {Array}         若干数值\r\n */\r\n\r\n\r\nfunction rangeStep(start, end, step) {\r\n  var num = new _decimal.default(start);\r\n  var i = 0;\r\n  var result = []; // magic number to prevent infinite loop\r\n\r\n  while (num.lt(end) && i < 100000) {\r\n    result.push(num.toNumber());\r\n    num = num.add(step);\r\n    i++;\r\n  }\r\n\r\n  return result;\r\n}\r\n/**\r\n * 对数值进行线性插值\r\n *\r\n * @param  {Number} a  定义域的极点\r\n * @param  {Number} b  定义域的极点\r\n * @param  {Number} t  [0, 1]内的某个值\r\n * @return {Number}    定义域内的某个值\r\n */\r\n\r\n\r\nvar interpolateNumber = (0, _utils.curry)(function (a, b, t) {\r\n  var newA = +a;\r\n  var newB = +b;\r\n  return newA + t * (newB - newA);\r\n});\r\n/**\r\n * 线性插值的逆运算\r\n *\r\n * @param  {Number} a 定义域的极点\r\n * @param  {Number} b 定义域的极点\r\n * @param  {Number} x 可以认为是插值后的一个输出值\r\n * @return {Number}   当x在 a ~ b这个范围内时，返回值属于[0, 1]\r\n */\r\n\r\nvar uninterpolateNumber = (0, _utils.curry)(function (a, b, x) {\r\n  var diff = b - +a;\r\n  diff = diff || Infinity;\r\n  return (x - a) / diff;\r\n});\r\n/**\r\n * 线性插值的逆运算，并且有截断的操作\r\n *\r\n * @param  {Number} a 定义域的极点\r\n * @param  {Number} b 定义域的极点\r\n * @param  {Number} x 可以认为是插值后的一个输出值\r\n * @return {Number}   当x在 a ~ b这个区间内时，返回值属于[0, 1]，\r\n * 当x不在 a ~ b这个区间时，会截断到 a ~ b 这个区间\r\n */\r\n\r\nvar uninterpolateTruncation = (0, _utils.curry)(function (a, b, x) {\r\n  var diff = b - +a;\r\n  diff = diff || Infinity;\r\n  return Math.max(0, Math.min(1, (x - a) / diff));\r\n});\r\nvar _default = {\r\n  rangeStep: rangeStep,\r\n  getDigitCount: getDigitCount,\r\n  interpolateNumber: interpolateNumber,\r\n  uninterpolateNumber: uninterpolateNumber,\r\n  uninterpolateTruncation: uninterpolateTruncation\r\n};\r\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}