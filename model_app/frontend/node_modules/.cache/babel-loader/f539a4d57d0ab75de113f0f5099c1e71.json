{"ast":null,"code":"export var prefix = \"$\";\n\nfunction Map() {}\n\nMap.prototype = map.prototype = {\n  constructor: Map,\n  has: function (key) {\n    return prefix + key in this;\n  },\n  get: function (key) {\n    return this[prefix + key];\n  },\n  set: function (key, value) {\n    this[prefix + key] = value;\n    return this;\n  },\n  remove: function (key) {\n    var property = prefix + key;\n    return property in this && delete this[property];\n  },\n  clear: function () {\n    for (var property in this) if (property[0] === prefix) delete this[property];\n  },\n  keys: function () {\n    var keys = [];\n\n    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n\n    return keys;\n  },\n  values: function () {\n    var values = [];\n\n    for (var property in this) if (property[0] === prefix) values.push(this[property]);\n\n    return values;\n  },\n  entries: function () {\n    var entries = [];\n\n    for (var property in this) if (property[0] === prefix) entries.push({\n      key: property.slice(1),\n      value: this[property]\n    });\n\n    return entries;\n  },\n  size: function () {\n    var size = 0;\n\n    for (var property in this) if (property[0] === prefix) ++size;\n\n    return size;\n  },\n  empty: function () {\n    for (var property in this) if (property[0] === prefix) return false;\n\n    return true;\n  },\n  each: function (f) {\n    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n  }\n};\n\nfunction map(object, f) {\n  var map = new Map(); // Copy constructor.\n\n  if (object instanceof Map) object.each(function (value, key) {\n    map.set(key, value);\n  }); // Index array by numeric index or specified key function.\n  else if (Array.isArray(object)) {\n      var i = -1,\n          n = object.length,\n          o;\n      if (f == null) while (++i < n) map.set(i, object[i]);else while (++i < n) map.set(f(o = object[i], i, object), o);\n    } // Convert object to map.\n    else if (object) for (var key in object) map.set(key, object[key]);\n  return map;\n}\n\nexport default map;","map":{"version":3,"sources":["/Users/davidyang/Documents/Website/model_app/frontend/node_modules/d3-collection/src/map.js"],"names":["prefix","Map","prototype","map","constructor","has","key","get","set","value","remove","property","clear","keys","push","slice","values","entries","size","empty","each","f","object","Array","isArray","i","n","length","o"],"mappings":"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","sourcesContent":["export var prefix = \"$\";\n\nfunction Map() {}\n\nMap.prototype = map.prototype = {\n  constructor: Map,\n  has: function(key) {\n    return (prefix + key) in this;\n  },\n  get: function(key) {\n    return this[prefix + key];\n  },\n  set: function(key, value) {\n    this[prefix + key] = value;\n    return this;\n  },\n  remove: function(key) {\n    var property = prefix + key;\n    return property in this && delete this[property];\n  },\n  clear: function() {\n    for (var property in this) if (property[0] === prefix) delete this[property];\n  },\n  keys: function() {\n    var keys = [];\n    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n    return keys;\n  },\n  values: function() {\n    var values = [];\n    for (var property in this) if (property[0] === prefix) values.push(this[property]);\n    return values;\n  },\n  entries: function() {\n    var entries = [];\n    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n    return entries;\n  },\n  size: function() {\n    var size = 0;\n    for (var property in this) if (property[0] === prefix) ++size;\n    return size;\n  },\n  empty: function() {\n    for (var property in this) if (property[0] === prefix) return false;\n    return true;\n  },\n  each: function(f) {\n    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n  }\n};\n\nfunction map(object, f) {\n  var map = new Map;\n\n  // Copy constructor.\n  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\n  // Index array by numeric index or specified key function.\n  else if (Array.isArray(object)) {\n    var i = -1,\n        n = object.length,\n        o;\n\n    if (f == null) while (++i < n) map.set(i, object[i]);\n    else while (++i < n) map.set(f(o = object[i], i, object), o);\n  }\n\n  // Convert object to map.\n  else if (object) for (var key in object) map.set(key, object[key]);\n\n  return map;\n}\n\nexport default map;\n"]},"metadata":{},"sourceType":"module"}