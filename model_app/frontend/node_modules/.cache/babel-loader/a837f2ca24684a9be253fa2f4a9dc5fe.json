{"ast":null,"code":"var Mexp = require('./lexer.js');\n\nMexp.prototype.toPostfix = function () {\n  'use strict';\n\n  var post = [],\n      elem,\n      popped,\n      prep,\n      pre,\n      ele;\n  var stack = [{\n    value: \"(\",\n    type: 4,\n    pre: 0\n  }];\n  var arr = this.value;\n\n  for (var i = 1; i < arr.length; i++) {\n    if (arr[i].type === 1 || arr[i].type === 3 || arr[i].type === 13) {\n      //if token is number,constant,or n(which is also a special constant in our case)\n      if (arr[i].type === 1) arr[i].value = Number(arr[i].value);\n      post.push(arr[i]);\n    } else if (arr[i].type === 4) {\n      stack.push(arr[i]);\n    } else if (arr[i].type === 5) {\n      while ((popped = stack.pop()).type !== 4) {\n        post.push(popped);\n      }\n    } else if (arr[i].type === 11) {\n      while ((popped = stack.pop()).type !== 4) {\n        post.push(popped);\n      }\n\n      stack.push(popped);\n    } else {\n      elem = arr[i];\n      pre = elem.pre;\n      ele = stack[stack.length - 1];\n      prep = ele.pre;\n      var flag = ele.value == 'Math.pow' && elem.value == 'Math.pow';\n      if (pre > prep) stack.push(elem);else {\n        while (prep >= pre && !flag || flag && pre < prep) {\n          popped = stack.pop();\n          ele = stack[stack.length - 1];\n          post.push(popped);\n          prep = ele.pre;\n          flag = elem.value == 'Math.pow' && ele.value == 'Math.pow';\n        }\n\n        stack.push(elem);\n      }\n    }\n  }\n\n  return new Mexp(post);\n};\n\nmodule.exports = Mexp;","map":{"version":3,"sources":["C:/Users/Mathias/Documents/Delineo/Website/model_app/frontend/node_modules/math-expression-evaluator/src/postfix.js"],"names":["Mexp","require","prototype","toPostfix","post","elem","popped","prep","pre","ele","stack","value","type","arr","i","length","Number","push","pop","flag","module","exports"],"mappings":"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","sourcesContent":["\r\n    var Mexp=require('./lexer.js');\r\n\r\n\tMexp.prototype.toPostfix = function () {\r\n\t\t'use strict';\r\n\t\tvar post=[],elem,popped,prep,pre,ele;\r\n    \tvar stack=[{value:\"(\",type:4,pre:0}];\r\n\t\tvar arr=this.value;\r\n\t\tfor (var i=1; i < arr.length; i++) {\r\n\t\t\tif(arr[i].type===1||arr[i].type===3||arr[i].type===13){\t//if token is number,constant,or n(which is also a special constant in our case)\r\n\t\t\t\tif(arr[i].type===1)\r\n\t\t\t\t\tarr[i].value=Number(arr[i].value);\r\n\t\t\t\tpost.push(arr[i]);\r\n\t\t\t}\r\n\t\t\telse if(arr[i].type===4){\r\n\t\t\t\tstack.push(arr[i]);\r\n\t\t\t}\r\n\t\t\telse if(arr[i].type===5){\r\n\t\t\t\twhile((popped=stack.pop()).type!==4){\r\n\t\t\t\t\tpost.push(popped);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(arr[i].type===11){\r\n\t\t\t\twhile((popped=stack.pop()).type!==4){\r\n\t\t\t\t\tpost.push(popped);\r\n\t\t\t\t}\r\n\t\t\t\tstack.push(popped);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\telem=arr[i];\r\n\t\t\t\tpre=elem.pre;\r\n\t\t\t\tele=stack[stack.length-1];\r\n\t\t\t\tprep=ele.pre;\r\n\t\t\t\tvar flag=ele.value=='Math.pow'&&elem.value=='Math.pow';\r\n\t\t\t\tif(pre>prep)stack.push(elem);\r\n\t\t\t\telse {\r\n\t\t\t\t\twhile(prep>=pre&&!flag||flag&&pre<prep){\r\n\t\t\t\t\t\tpopped=stack.pop();\r\n\t\t\t\t\t\tele=stack[stack.length-1];\r\n\t\t\t\t\t\tpost.push(popped);\r\n\t\t\t\t\t\tprep=ele.pre;\r\n\t\t\t\t\t\tflag=elem.value=='Math.pow'&&ele.value=='Math.pow';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstack.push(elem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn new Mexp(post);\r\n\t};\r\n    module.exports=Mexp;"]},"metadata":{},"sourceType":"script"}