{"ast":null,"code":"import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\n/* eslint-disable no-use-before-define */\n\n/**\r\n * Returns a number whose value is limited to the given range.\r\n *\r\n * @param {number} value The value to be clamped\r\n * @param {number} min The lower boundary of the output range\r\n * @param {number} max The upper boundary of the output range\r\n * @returns {number} A number in the range [min, max]\r\n */\n\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(\"Material-UI: The value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\r\n * Converts a color from CSS hex format to CSS rgb format.\r\n *\r\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\r\n * @returns {string} A CSS rgb color string\r\n */\n\n\nexport function hexToRgb(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length >= 6 ? 2 : 1, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb\".concat(colors.length === 4 ? 'a' : '', \"(\").concat(colors.map(function (n, index) {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(int) {\n  var hex = int.toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\r\n * Converts a color from CSS rgb format to CSS hex format.\r\n *\r\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\r\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\r\n */\n\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n) {\n    return intToHex(n);\n  }).join(''));\n}\n/**\r\n * Converts a color from hsl format to rgb format.\r\n *\r\n * @param {string} color - HSL color values\r\n * @returns {string} rgb color values\r\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  var _color = color,\n      values = _color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\r\n * Returns an object with the type and values of a color.\r\n *\r\n * Note: Does not support rgb % values.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {object} - A MUI color object: {type: string, values: number[]}\r\n */\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: Unsupported `\".concat(color, \"` color.\\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().\") : _formatMuiErrorMessage(3, color));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\r\n * Converts a color object with type and values to a string.\r\n *\r\n * @param {object} color - Decomposed color\r\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\r\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\r\n * @returns {string} A CSS color string\r\n */\n\nexport function recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(type, \"(\").concat(values.join(', '), \")\");\n}\n/**\r\n * Calculates the contrast ratio between two colors.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n *\r\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} A contrast ratio value in the range 0 - 21.\r\n */\n\nexport function getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\r\n * The relative brightness of any point in a color space,\r\n * normalized to 0 for darkest black and 1 for lightest white.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} The relative brightness of the color in the range 0 - 1\r\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(function (val) {\n    val /= 255; // normalized\n\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\r\n * Darken or lighten a color, depending on its luminance.\r\n * Light colors are darkened, dark colors are lightened.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\r\n * Set the absolute transparency of a color.\r\n * Any existing alpha values are overwritten.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} value - value to set the alpha channel to in the range 0 -1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\r\n * Darkens a color.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\r\n * Lightens a color.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}","map":{"version":3,"sources":["C:/Users/Arpan Gandhi/Desktop/Aayush Coding/Website/model_app/frontend/node_modules/@material-ui/core/esm/styles/colorManipulator.js"],"names":["formatMuiErrorMessage","_formatMuiErrorMessage","clamp","value","min","arguments","length","undefined","max","process","env","NODE_ENV","console","error","concat","Math","hexToRgb","color","substr","re","RegExp","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","rgbToHex","indexOf","_decomposeColor","decomposeColor","values","hslToRgb","_color","h","s","l","a","f","k","type","rgb","push","recomposeColor","charAt","marker","substring","Error","split","parseFloat","i","getContrastRatio","foreground","background","lumA","getLuminance","lumB","val","pow","Number","toFixed","emphasize","coefficient","darken","lighten","fade"],"mappings":"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","sourcesContent":["import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\r\n\r\n/* eslint-disable no-use-before-define */\r\n\r\n/**\r\n * Returns a number whose value is limited to the given range.\r\n *\r\n * @param {number} value The value to be clamped\r\n * @param {number} min The lower boundary of the output range\r\n * @param {number} max The upper boundary of the output range\r\n * @returns {number} A number in the range [min, max]\r\n */\r\nfunction clamp(value) {\r\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\r\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (value < min || value > max) {\r\n      console.error(\"Material-UI: The value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\r\n    }\r\n  }\r\n\r\n  return Math.min(Math.max(min, value), max);\r\n}\r\n/**\r\n * Converts a color from CSS hex format to CSS rgb format.\r\n *\r\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\r\n * @returns {string} A CSS rgb color string\r\n */\r\n\r\n\r\nexport function hexToRgb(color) {\r\n  color = color.substr(1);\r\n  var re = new RegExp(\".{1,\".concat(color.length >= 6 ? 2 : 1, \"}\"), 'g');\r\n  var colors = color.match(re);\r\n\r\n  if (colors && colors[0].length === 1) {\r\n    colors = colors.map(function (n) {\r\n      return n + n;\r\n    });\r\n  }\r\n\r\n  return colors ? \"rgb\".concat(colors.length === 4 ? 'a' : '', \"(\").concat(colors.map(function (n, index) {\r\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\r\n  }).join(', '), \")\") : '';\r\n}\r\n\r\nfunction intToHex(int) {\r\n  var hex = int.toString(16);\r\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\r\n}\r\n/**\r\n * Converts a color from CSS rgb format to CSS hex format.\r\n *\r\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\r\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\r\n */\r\n\r\n\r\nexport function rgbToHex(color) {\r\n  // Idempotent\r\n  if (color.indexOf('#') === 0) {\r\n    return color;\r\n  }\r\n\r\n  var _decomposeColor = decomposeColor(color),\r\n      values = _decomposeColor.values;\r\n\r\n  return \"#\".concat(values.map(function (n) {\r\n    return intToHex(n);\r\n  }).join(''));\r\n}\r\n/**\r\n * Converts a color from hsl format to rgb format.\r\n *\r\n * @param {string} color - HSL color values\r\n * @returns {string} rgb color values\r\n */\r\n\r\nexport function hslToRgb(color) {\r\n  color = decomposeColor(color);\r\n  var _color = color,\r\n      values = _color.values;\r\n  var h = values[0];\r\n  var s = values[1] / 100;\r\n  var l = values[2] / 100;\r\n  var a = s * Math.min(l, 1 - l);\r\n\r\n  var f = function f(n) {\r\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\r\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\r\n  };\r\n\r\n  var type = 'rgb';\r\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\r\n\r\n  if (color.type === 'hsla') {\r\n    type += 'a';\r\n    rgb.push(values[3]);\r\n  }\r\n\r\n  return recomposeColor({\r\n    type: type,\r\n    values: rgb\r\n  });\r\n}\r\n/**\r\n * Returns an object with the type and values of a color.\r\n *\r\n * Note: Does not support rgb % values.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {object} - A MUI color object: {type: string, values: number[]}\r\n */\r\n\r\nexport function decomposeColor(color) {\r\n  // Idempotent\r\n  if (color.type) {\r\n    return color;\r\n  }\r\n\r\n  if (color.charAt(0) === '#') {\r\n    return decomposeColor(hexToRgb(color));\r\n  }\r\n\r\n  var marker = color.indexOf('(');\r\n  var type = color.substring(0, marker);\r\n\r\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\r\n    throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: Unsupported `\".concat(color, \"` color.\\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().\") : _formatMuiErrorMessage(3, color));\r\n  }\r\n\r\n  var values = color.substring(marker + 1, color.length - 1).split(',');\r\n  values = values.map(function (value) {\r\n    return parseFloat(value);\r\n  });\r\n  return {\r\n    type: type,\r\n    values: values\r\n  };\r\n}\r\n/**\r\n * Converts a color object with type and values to a string.\r\n *\r\n * @param {object} color - Decomposed color\r\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\r\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\r\n * @returns {string} A CSS color string\r\n */\r\n\r\nexport function recomposeColor(color) {\r\n  var type = color.type;\r\n  var values = color.values;\r\n\r\n  if (type.indexOf('rgb') !== -1) {\r\n    // Only convert the first 3 values to int (i.e. not alpha)\r\n    values = values.map(function (n, i) {\r\n      return i < 3 ? parseInt(n, 10) : n;\r\n    });\r\n  } else if (type.indexOf('hsl') !== -1) {\r\n    values[1] = \"\".concat(values[1], \"%\");\r\n    values[2] = \"\".concat(values[2], \"%\");\r\n  }\r\n\r\n  return \"\".concat(type, \"(\").concat(values.join(', '), \")\");\r\n}\r\n/**\r\n * Calculates the contrast ratio between two colors.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n *\r\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} A contrast ratio value in the range 0 - 21.\r\n */\r\n\r\nexport function getContrastRatio(foreground, background) {\r\n  var lumA = getLuminance(foreground);\r\n  var lumB = getLuminance(background);\r\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\r\n}\r\n/**\r\n * The relative brightness of any point in a color space,\r\n * normalized to 0 for darkest black and 1 for lightest white.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} The relative brightness of the color in the range 0 - 1\r\n */\r\n\r\nexport function getLuminance(color) {\r\n  color = decomposeColor(color);\r\n  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\r\n  rgb = rgb.map(function (val) {\r\n    val /= 255; // normalized\r\n\r\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\r\n  }); // Truncate at 3 digits\r\n\r\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\r\n}\r\n/**\r\n * Darken or lighten a color, depending on its luminance.\r\n * Light colors are darkened, dark colors are lightened.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function emphasize(color) {\r\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\r\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\r\n}\r\n/**\r\n * Set the absolute transparency of a color.\r\n * Any existing alpha values are overwritten.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} value - value to set the alpha channel to in the range 0 -1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function fade(color, value) {\r\n  color = decomposeColor(color);\r\n  value = clamp(value);\r\n\r\n  if (color.type === 'rgb' || color.type === 'hsl') {\r\n    color.type += 'a';\r\n  }\r\n\r\n  color.values[3] = value;\r\n  return recomposeColor(color);\r\n}\r\n/**\r\n * Darkens a color.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function darken(color, coefficient) {\r\n  color = decomposeColor(color);\r\n  coefficient = clamp(coefficient);\r\n\r\n  if (color.type.indexOf('hsl') !== -1) {\r\n    color.values[2] *= 1 - coefficient;\r\n  } else if (color.type.indexOf('rgb') !== -1) {\r\n    for (var i = 0; i < 3; i += 1) {\r\n      color.values[i] *= 1 - coefficient;\r\n    }\r\n  }\r\n\r\n  return recomposeColor(color);\r\n}\r\n/**\r\n * Lightens a color.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function lighten(color, coefficient) {\r\n  color = decomposeColor(color);\r\n  coefficient = clamp(coefficient);\r\n\r\n  if (color.type.indexOf('hsl') !== -1) {\r\n    color.values[2] += (100 - color.values[2]) * coefficient;\r\n  } else if (color.type.indexOf('rgb') !== -1) {\r\n    for (var i = 0; i < 3; i += 1) {\r\n      color.values[i] += (255 - color.values[i]) * coefficient;\r\n    }\r\n  }\r\n\r\n  return recomposeColor(color);\r\n}"]},"metadata":{},"sourceType":"module"}