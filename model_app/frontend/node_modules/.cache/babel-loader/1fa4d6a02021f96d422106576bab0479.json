{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\nexport default function useMediaQuery(queryInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var theme = useTheme();\n  var props = getThemeProps({\n    theme: theme,\n    name: 'MuiUseMediaQuery',\n    props: {}\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['Material-UI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  var _props$options = _extends({}, props, options),\n      _props$options$defaul = _props$options.defaultMatches,\n      defaultMatches = _props$options$defaul === void 0 ? false : _props$options$defaul,\n      _props$options$matchM = _props$options.matchMedia,\n      matchMedia = _props$options$matchM === void 0 ? supportMatchMedia ? window.matchMedia : null : _props$options$matchM,\n      _props$options$noSsr = _props$options.noSsr,\n      noSsr = _props$options$noSsr === void 0 ? false : _props$options$noSsr,\n      _props$options$ssrMat = _props$options.ssrMatchMedia,\n      ssrMatchMedia = _props$options$ssrMat === void 0 ? null : _props$options$ssrMat;\n\n  var _React$useState = React.useState(function () {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  }),\n      match = _React$useState[0],\n      setMatch = _React$useState[1];\n\n  React.useEffect(function () {\n    var active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    var queryList = matchMedia(query);\n\n    var updateMatch = function updateMatch() {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return function () {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query: query,\n      match: match\n    });\n  }\n\n  return match;\n}","map":{"version":3,"sources":["C:/Users/totti/Documents/jhu class/delineo/Website/model_app/frontend/node_modules/@material-ui/core/esm/useMediaQuery/useMediaQuery.js"],"names":["_extends","React","getThemeProps","useTheme","useMediaQuery","queryInput","options","arguments","length","undefined","theme","props","name","process","env","NODE_ENV","console","error","join","query","replace","supportMatchMedia","window","matchMedia","_props$options","_props$options$defaul","defaultMatches","_props$options$matchM","_props$options$noSsr","noSsr","_props$options$ssrMat","ssrMatchMedia","_React$useState","useState","matches","match","setMatch","useEffect","active","queryList","updateMatch","addListener","removeListener","useDebugValue"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { getThemeProps, useTheme } from '@material-ui/styles';\r\nexport default function useMediaQuery(queryInput) {\r\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var theme = useTheme();\r\n  var props = getThemeProps({\r\n    theme: theme,\r\n    name: 'MuiUseMediaQuery',\r\n    props: {}\r\n  });\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (typeof queryInput === 'function' && theme === null) {\r\n      console.error(['Material-UI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\r\n    }\r\n  }\r\n\r\n  var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\r\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\r\n  // All the browsers Material-UI support have this built-in.\r\n  // This defensive check is here for simplicity.\r\n  // Most of the time, the match media logic isn't central to people tests.\r\n\r\n  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\r\n\r\n  var _props$options = _extends({}, props, options),\r\n      _props$options$defaul = _props$options.defaultMatches,\r\n      defaultMatches = _props$options$defaul === void 0 ? false : _props$options$defaul,\r\n      _props$options$matchM = _props$options.matchMedia,\r\n      matchMedia = _props$options$matchM === void 0 ? supportMatchMedia ? window.matchMedia : null : _props$options$matchM,\r\n      _props$options$noSsr = _props$options.noSsr,\r\n      noSsr = _props$options$noSsr === void 0 ? false : _props$options$noSsr,\r\n      _props$options$ssrMat = _props$options.ssrMatchMedia,\r\n      ssrMatchMedia = _props$options$ssrMat === void 0 ? null : _props$options$ssrMat;\r\n\r\n  var _React$useState = React.useState(function () {\r\n    if (noSsr && supportMatchMedia) {\r\n      return matchMedia(query).matches;\r\n    }\r\n\r\n    if (ssrMatchMedia) {\r\n      return ssrMatchMedia(query).matches;\r\n    } // Once the component is mounted, we rely on the\r\n    // event listeners to return the correct matches value.\r\n\r\n\r\n    return defaultMatches;\r\n  }),\r\n      match = _React$useState[0],\r\n      setMatch = _React$useState[1];\r\n\r\n  React.useEffect(function () {\r\n    var active = true;\r\n\r\n    if (!supportMatchMedia) {\r\n      return undefined;\r\n    }\r\n\r\n    var queryList = matchMedia(query);\r\n\r\n    var updateMatch = function updateMatch() {\r\n      // Workaround Safari wrong implementation of matchMedia\r\n      // TODO can we remove it?\r\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\r\n      if (active) {\r\n        setMatch(queryList.matches);\r\n      }\r\n    };\r\n\r\n    updateMatch();\r\n    queryList.addListener(updateMatch);\r\n    return function () {\r\n      active = false;\r\n      queryList.removeListener(updateMatch);\r\n    };\r\n  }, [query, matchMedia, supportMatchMedia]);\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    React.useDebugValue({\r\n      query: query,\r\n      match: match\r\n    });\r\n  }\r\n\r\n  return match;\r\n}"]},"metadata":{},"sourceType":"module"}