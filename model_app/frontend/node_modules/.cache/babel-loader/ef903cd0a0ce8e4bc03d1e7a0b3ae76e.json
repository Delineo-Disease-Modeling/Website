{"ast":null,"code":"var Mexp = require('./math_function.js');\n\nfunction inc(arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] += val;\n  }\n\n  return arr;\n}\n\nvar token = ['sin', 'cos', 'tan', 'pi', '(', ')', 'P', 'C', 'asin', 'acos', 'atan', '7', '8', '9', 'int', 'cosh', 'acosh', 'ln', '^', 'root', '4', '5', '6', '/', '!', 'tanh', 'atanh', 'Mod', '1', '2', '3', '*', 'sinh', 'asinh', 'e', 'log', '0', '.', '+', '-', ',', 'Sigma', 'n', 'Pi', 'pow'];\nvar show = ['sin', 'cos', 'tan', '&pi;', '(', ')', 'P', 'C', 'asin', 'acos', 'atan', '7', '8', '9', 'Int', 'cosh', 'acosh', ' ln', '^', 'root', '4', '5', '6', '&divide;', '!', 'tanh', 'atanh', ' Mod ', '1', '2', '3', '&times;', 'sinh', 'asinh', 'e', ' log', '0', '.', '+', '-', ',', '&Sigma;', 'n', '&Pi;', 'pow'];\nvar eva = [Mexp.math.sin, Mexp.math.cos, Mexp.math.tan, 'PI', '(', ')', Mexp.math.P, Mexp.math.C, Mexp.math.asin, Mexp.math.acos, Mexp.math.atan, '7', '8', '9', Math.floor, Mexp.math.cosh, Mexp.math.acosh, Math.log, Math.pow, Math.sqrt, '4', '5', '6', Mexp.math.div, Mexp.math.fact, Mexp.math.tanh, Mexp.math.atanh, Mexp.math.mod, '1', '2', '3', Mexp.math.mul, Mexp.math.sinh, Mexp.math.asinh, 'E', Mexp.math.log, '0', '.', Mexp.math.add, Mexp.math.sub, ',', Mexp.math.sigma, 'n', Mexp.math.Pi, Math.pow];\nvar preced = {\n  0: 11,\n  1: 0,\n  2: 3,\n  3: 0,\n  4: 0,\n  5: 0,\n  6: 0,\n  7: 11,\n  8: 11,\n  9: 1,\n  10: 10,\n  11: 0,\n  12: 11,\n  13: 0\n}; // stores precedence by types\n\nvar type = [0, 0, 0, 3, 4, 5, 10, 10, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 10, 0, 1, 1, 1, 2, 7, 0, 0, 2, 1, 1, 1, 2, 0, 0, 3, 0, 1, 6, 9, 9, 11, 12, 13, 12, 8];\n/*\r\n0 : function with syntax function_name(Maths_exp)\r\n1 : numbers\r\n2 : binary operators like * / Mod left associate and same precedence\r\n3 : Math constant values like e,pi,Cruncher ans\r\n4 : opening bracket\r\n5 : closing bracket\r\n6 : decimal\r\n7 : function with syntax (Math_exp)function_name\r\n8: function with syntax function_name(Math_exp1,Math_exp2)\r\n9 : binary operator like +,-\r\n10: binary operator like P C or ^\r\n11: ,\r\n12: function with , seperated three parameters\r\n13: variable of Sigma function\r\n*/\n\nvar type0 = {\n  0: true,\n  1: true,\n  3: true,\n  4: true,\n  6: true,\n  8: true,\n  9: true,\n  12: true,\n  13: true\n}; // type2:true,type4:true,type9:true,type11:true,type21:true,type22\n\nvar type1 = {\n  0: true,\n  1: true,\n  2: true,\n  3: true,\n  4: true,\n  5: true,\n  6: true,\n  7: true,\n  8: true,\n  9: true,\n  10: true,\n  11: true,\n  12: true,\n  13: true\n}; // type3:true,type5:true,type7:true,type23\n\nvar type1Asterick = {\n  0: true,\n  3: true,\n  4: true,\n  8: true,\n  12: true,\n  13: true\n};\nvar empty = {};\nvar type3Asterick = {\n  0: true,\n  1: true,\n  3: true,\n  4: true,\n  6: true,\n  8: true,\n  12: true,\n  13: true\n}; // type_5:true,type_7:true,type_23\n\nvar type6 = {\n  1: true\n};\nvar newAr = [[], ['1', '2', '3', '7', '8', '9', '4', '5', '6', '+', '-', '*', '/', '(', ')', '^', '!', 'P', 'C', 'e', '0', '.', ',', 'n'], ['pi', 'ln', 'Pi'], ['sin', 'cos', 'tan', 'Del', 'int', 'Mod', 'log', 'pow'], ['asin', 'acos', 'atan', 'cosh', 'root', 'tanh', 'sinh'], ['acosh', 'atanh', 'asinh', 'Sigma']];\n\nfunction match(str1, str2, i, x) {\n  for (var f = 0; f < x; f++) {\n    if (str1[i + f] !== str2[f]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nMexp.addToken = function (tokens) {\n  for (var i = 0; i < tokens.length; i++) {\n    var x = tokens[i].token.length;\n    var temp = -1; // newAr is a specially designed data structure index of 1d array = length of tokens\n\n    if (x < newAr.length) {\n      // match to check if token is really huge and not existing\n      // if not checked it will break in next line as undefined index\n      for (var y = 0; y < newAr[x].length; y++) {\n        if (tokens[i].token === newAr[x][y]) {\n          temp = token.indexOf(newAr[x][y]);\n          break;\n        }\n      }\n    }\n\n    if (temp === -1) {\n      token.push(tokens[i].token);\n      type.push(tokens[i].type);\n\n      if (newAr.length <= tokens[i].token.length) {\n        newAr[tokens[i].token.length] = [];\n      }\n\n      newAr[tokens[i].token.length].push(tokens[i].token);\n      eva.push(tokens[i].value);\n      show.push(tokens[i].show);\n    } else {\n      token[temp] = tokens[i].token;\n      type[temp] = tokens[i].type;\n      eva[temp] = tokens[i].value;\n      show[temp] = tokens[i].show;\n    }\n  }\n};\n\nMexp.lex = function (inp, tokens) {\n  'use strict';\n\n  var changeSignObj = {\n    value: Mexp.math.changeSign,\n    type: 0,\n    pre: 21,\n    show: '-'\n  };\n  var closingParObj = {\n    value: ')',\n    show: ')',\n    type: 5,\n    pre: 0\n  };\n  var openingParObj = {\n    value: '(',\n    type: 4,\n    pre: 0,\n    show: '('\n  };\n  var str = [openingParObj];\n  var ptc = []; // Parenthesis to close at the beginning is after one token\n\n  var inpStr = inp;\n  var key;\n  var allowed = type0;\n  var bracToClose = 0;\n  var asterick = empty;\n  var prevKey = '';\n  var i, x, y;\n\n  if (typeof tokens !== 'undefined') {\n    Mexp.addToken(tokens);\n  }\n\n  var obj = {};\n\n  for (i = 0; i < inpStr.length; i++) {\n    if (inpStr[i] === ' ') {\n      continue;\n    }\n\n    key = '';\n\n    for (x = inpStr.length - i > newAr.length - 2 ? newAr.length - 1 : inpStr.length - i; x > 0; x--) {\n      if (newAr[x] === undefined) continue;\n\n      for (y = 0; y < newAr[x].length; y++) {\n        if (match(inpStr, newAr[x][y], i, x)) {\n          key = newAr[x][y];\n          y = newAr[x].length;\n          x = 0;\n        }\n      }\n    }\n\n    i += key.length - 1;\n\n    if (key === '') {\n      throw new Mexp.Exception('Can\\'t understand after ' + inpStr.slice(i));\n    }\n\n    var index = token.indexOf(key);\n    var cToken = key;\n    var cType = type[index];\n    var cEv = eva[index];\n    var cPre = preced[cType];\n    var cShow = show[index];\n    var pre = str[str.length - 1];\n    var j;\n\n    for (j = ptc.length; j--;) {\n      // loop over ptc\n      if (ptc[j] === 0) {\n        if ([0, 2, 3, 4, 5, 9, 11, 12, 13].indexOf(cType) !== -1) {\n          if (allowed[cType] !== true) {\n            throw new Mexp.Exception(key + ' is not allowed after ' + prevKey);\n          }\n\n          str.push(closingParObj);\n          allowed = type1;\n          asterick = type3Asterick;\n          inc(ptc, -1).pop();\n        }\n      } else break;\n    }\n\n    if (allowed[cType] !== true) {\n      throw new Mexp.Exception(key + ' is not allowed after ' + prevKey);\n    }\n\n    if (asterick[cType] === true) {\n      cType = 2;\n      cEv = Mexp.math.mul;\n      cShow = '&times;';\n      cPre = 3;\n      i = i - key.length;\n    }\n\n    obj = {\n      value: cEv,\n      type: cType,\n      pre: cPre,\n      show: cShow\n    };\n\n    if (cType === 0) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 2).push(2);\n      str.push(obj);\n      str.push(openingParObj);\n    } else if (cType === 1) {\n      if (pre.type === 1) {\n        pre.value += cEv;\n        inc(ptc, 1);\n      } else {\n        str.push(obj);\n      }\n\n      allowed = type1;\n      asterick = type1Asterick;\n    } else if (cType === 2) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 2);\n      str.push(obj);\n    } else if (cType === 3) {\n      // constant\n      str.push(obj);\n      allowed = type1;\n      asterick = type3Asterick;\n    } else if (cType === 4) {\n      inc(ptc, 1);\n      bracToClose++;\n      allowed = type0;\n      asterick = empty;\n      str.push(obj);\n    } else if (cType === 5) {\n      if (!bracToClose) {\n        throw new Mexp.Exception('Closing parenthesis are more than opening one, wait What!!!');\n      }\n\n      bracToClose--;\n      allowed = type1;\n      asterick = type3Asterick;\n      str.push(obj);\n    } else if (cType === 6) {\n      if (pre.hasDec) {\n        throw new Mexp.Exception('Two decimals are not allowed in one number');\n      }\n\n      if (pre.type !== 1) {\n        pre = {\n          value: 0,\n          type: 1,\n          pre: 0\n        }; // pre needs to be changed as it will the last value now to be safe in later code\n\n        str.push(pre);\n        inc(ptc, -1);\n      }\n\n      allowed = type6;\n      inc(ptc, 1);\n      asterick = empty;\n      pre.value += cEv;\n      pre.hasDec = true;\n    } else if (cType === 7) {\n      allowed = type1;\n      asterick = type3Asterick;\n      inc(ptc, 1);\n      str.push(obj);\n    }\n\n    if (cType === 8) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 4).push(4);\n      str.push(obj);\n      str.push(openingParObj);\n    } else if (cType === 9) {\n      if (pre.type === 9) {\n        if (pre.value === Mexp.math.add) {\n          pre.value = cEv;\n          pre.show = cShow;\n          inc(ptc, 1);\n        } else if (pre.value === Mexp.math.sub && cShow === '-') {\n          pre.value = Mexp.math.add;\n          pre.show = '+';\n          inc(ptc, 1);\n        }\n      } else if (pre.type !== 5 && pre.type !== 7 && pre.type !== 1 && pre.type !== 3 && pre.type !== 13) {\n        // changesign only when negative is found\n        if (cToken === '-') {\n          // do nothing for + token\n          // don't add with the above if statement as that will run the else statement of parent if on Ctoken +\n          allowed = type0;\n          asterick = empty;\n          inc(ptc, 2).push(2);\n          str.push(changeSignObj);\n          str.push(openingParObj);\n        }\n      } else {\n        str.push(obj);\n        inc(ptc, 2);\n      }\n\n      allowed = type0;\n      asterick = empty;\n    } else if (cType === 10) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 2);\n      str.push(obj);\n    } else if (cType === 11) {\n      allowed = type0;\n      asterick = empty;\n      str.push(obj);\n    } else if (cType === 12) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 6).push(6);\n      str.push(obj);\n      str.push(openingParObj);\n    } else if (cType === 13) {\n      allowed = type1;\n      asterick = type3Asterick;\n      str.push(obj);\n    }\n\n    inc(ptc, -1);\n    prevKey = key;\n  }\n\n  for (j = ptc.length; j--;) {\n    // loop over ptc\n    if (ptc[j] === 0) {\n      str.push(closingParObj);\n      inc(ptc, -1).pop();\n    } else break; // if it is not zero so before ptc also cant be zero\n\n  }\n\n  if (allowed[5] !== true) {\n    throw new Mexp.Exception('complete the expression');\n  }\n\n  while (bracToClose--) {\n    str.push(closingParObj);\n  }\n\n  str.push(closingParObj); //        console.log(str);\n\n  return new Mexp(str);\n};\n\nmodule.exports = Mexp;","map":{"version":3,"sources":["C:/Users/Arpan Gandhi/Desktop/Aayush Coding/Website/model_app/frontend/node_modules/math-expression-evaluator/src/lexer.js"],"names":["Mexp","require","inc","arr","val","i","length","token","show","eva","math","sin","cos","tan","P","C","asin","acos","atan","Math","floor","cosh","acosh","log","pow","sqrt","div","fact","tanh","atanh","mod","mul","sinh","asinh","add","sub","sigma","Pi","preced","type","type0","type1","type1Asterick","empty","type3Asterick","type6","newAr","match","str1","str2","x","f","addToken","tokens","temp","y","indexOf","push","value","lex","inp","changeSignObj","changeSign","pre","closingParObj","openingParObj","str","ptc","inpStr","key","allowed","bracToClose","asterick","prevKey","obj","undefined","Exception","slice","index","cToken","cType","cEv","cPre","cShow","j","pop","hasDec","module","exports"],"mappings":"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","sourcesContent":["var Mexp = require('./math_function.js')\r\nfunction inc (arr, val) {\r\n  for (var i = 0; i < arr.length; i++) {\r\n    arr[i] += val\r\n  }\r\n  return arr\r\n}\r\nvar token = ['sin', 'cos', 'tan', 'pi', '(', ')', 'P', 'C',\r\n  'asin', 'acos', 'atan', '7', '8', '9', 'int',\r\n  'cosh', 'acosh', 'ln', '^', 'root', '4', '5', '6', '/', '!',\r\n  'tanh', 'atanh', 'Mod', '1', '2', '3', '*',\r\n  'sinh', 'asinh', 'e', 'log', '0', '.', '+', '-', ',', 'Sigma', 'n', 'Pi', 'pow']\r\nvar show = ['sin', 'cos', 'tan', '&pi;', '(', ')', 'P', 'C',\r\n  'asin', 'acos', 'atan', '7', '8', '9', 'Int',\r\n  'cosh', 'acosh', ' ln', '^', 'root', '4', '5', '6', '&divide;', '!',\r\n  'tanh', 'atanh', ' Mod ', '1', '2', '3', '&times;',\r\n  'sinh', 'asinh', 'e', ' log', '0', '.', '+', '-', ',', '&Sigma;', 'n', '&Pi;', 'pow']\r\nvar eva = [Mexp.math.sin, Mexp.math.cos, Mexp.math.tan, 'PI', '(', ')', Mexp.math.P, Mexp.math.C,\r\n  Mexp.math.asin, Mexp.math.acos, Mexp.math.atan, '7', '8', '9', Math.floor,\r\n  Mexp.math.cosh, Mexp.math.acosh, Math.log, Math.pow, Math.sqrt, '4', '5', '6', Mexp.math.div, Mexp.math.fact,\r\n  Mexp.math.tanh, Mexp.math.atanh, Mexp.math.mod, '1', '2', '3', Mexp.math.mul,\r\n  Mexp.math.sinh, Mexp.math.asinh, 'E', Mexp.math.log, '0', '.', Mexp.math.add, Mexp.math.sub, ',', Mexp.math.sigma, 'n', Mexp.math.Pi, Math.pow]\r\nvar preced = {\r\n  0: 11,\r\n  1: 0,\r\n  2: 3,\r\n  3: 0,\r\n  4: 0,\r\n  5: 0,\r\n  6: 0,\r\n  7: 11,\r\n  8: 11,\r\n  9: 1,\r\n  10: 10,\r\n  11: 0,\r\n  12: 11,\r\n  13: 0\r\n} // stores precedence by types\r\nvar type = [0, 0, 0, 3, 4, 5, 10, 10,\r\n  0, 0, 0, 1, 1, 1, 0,\r\n  0, 0, 0, 10, 0, 1, 1, 1, 2, 7,\r\n  0, 0, 2, 1, 1, 1, 2,\r\n  0, 0, 3, 0, 1, 6, 9, 9, 11, 12, 13, 12, 8]\r\n/*\r\n0 : function with syntax function_name(Maths_exp)\r\n1 : numbers\r\n2 : binary operators like * / Mod left associate and same precedence\r\n3 : Math constant values like e,pi,Cruncher ans\r\n4 : opening bracket\r\n5 : closing bracket\r\n6 : decimal\r\n7 : function with syntax (Math_exp)function_name\r\n8: function with syntax function_name(Math_exp1,Math_exp2)\r\n9 : binary operator like +,-\r\n10: binary operator like P C or ^\r\n11: ,\r\n12: function with , seperated three parameters\r\n13: variable of Sigma function\r\n*/\r\nvar type0 = {\r\n  0: true,\r\n  1: true,\r\n  3: true,\r\n  4: true,\r\n  6: true,\r\n  8: true,\r\n  9: true,\r\n  12: true,\r\n  13: true\r\n} // type2:true,type4:true,type9:true,type11:true,type21:true,type22\r\nvar type1 = {\r\n  0: true,\r\n  1: true,\r\n  2: true,\r\n  3: true,\r\n  4: true,\r\n  5: true,\r\n  6: true,\r\n  7: true,\r\n  8: true,\r\n  9: true,\r\n  10: true,\r\n  11: true,\r\n  12: true,\r\n  13: true\r\n} // type3:true,type5:true,type7:true,type23\r\nvar type1Asterick = {\r\n  0: true,\r\n  3: true,\r\n  4: true,\r\n  8: true,\r\n  12: true,\r\n  13: true\r\n}\r\nvar empty = {}\r\nvar type3Asterick = {\r\n  0: true,\r\n  1: true,\r\n  3: true,\r\n  4: true,\r\n  6: true,\r\n  8: true,\r\n  12: true,\r\n  13: true\r\n} // type_5:true,type_7:true,type_23\r\nvar type6 = {\r\n  1: true\r\n}\r\nvar newAr = [\r\n  [],\r\n  ['1', '2', '3', '7', '8', '9', '4', '5', '6', '+', '-', '*', '/', '(', ')', '^', '!', 'P', 'C', 'e', '0', '.', ',', 'n'],\r\n  ['pi', 'ln', 'Pi'],\r\n  ['sin', 'cos', 'tan', 'Del', 'int', 'Mod', 'log', 'pow'],\r\n  ['asin', 'acos', 'atan', 'cosh', 'root', 'tanh', 'sinh'],\r\n  ['acosh', 'atanh', 'asinh', 'Sigma']\r\n]\r\n\r\nfunction match (str1, str2, i, x) {\r\n  for (var f = 0; f < x; f++) {\r\n    if (str1[i + f] !== str2[f]) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\nMexp.addToken = function (tokens) {\r\n  for (var i = 0; i < tokens.length; i++) {\r\n    var x = tokens[i].token.length\r\n    var temp = -1\r\n\r\n    // newAr is a specially designed data structure index of 1d array = length of tokens\r\n\r\n    if (x < newAr.length) { // match to check if token is really huge and not existing\r\n    // if not checked it will break in next line as undefined index\r\n      for (var y = 0; y < newAr[x].length; y++) {\r\n        if (tokens[i].token === newAr[x][y]) {\r\n          temp = token.indexOf(newAr[x][y])\r\n          break\r\n        }\r\n      }\r\n    }\r\n    if (temp === -1) {\r\n      token.push(tokens[i].token)\r\n      type.push(tokens[i].type)\r\n      if (newAr.length <= tokens[i].token.length) {\r\n        newAr[tokens[i].token.length] = []\r\n      }\r\n      newAr[tokens[i].token.length].push(tokens[i].token)\r\n      eva.push(tokens[i].value)\r\n      show.push(tokens[i].show)\r\n    } else {\r\n      token[temp] = tokens[i].token\r\n      type[temp] = tokens[i].type\r\n      eva[temp] = tokens[i].value\r\n      show[temp] = tokens[i].show\r\n    }\r\n  }\r\n}\r\nMexp.lex = function (inp, tokens) {\r\n  'use strict'\r\n  var changeSignObj = {\r\n    value: Mexp.math.changeSign,\r\n    type: 0,\r\n    pre: 21,\r\n    show: '-'\r\n  }\r\n  var closingParObj = {\r\n    value: ')',\r\n    show: ')',\r\n    type: 5,\r\n    pre: 0\r\n  }\r\n  var openingParObj = {\r\n    value: '(',\r\n    type: 4,\r\n    pre: 0,\r\n    show: '('\r\n  }\r\n  var str = [openingParObj]\r\n  var ptc = [] // Parenthesis to close at the beginning is after one token\r\n  var inpStr = inp\r\n  var key\r\n  var allowed = type0\r\n  var bracToClose = 0\r\n  var asterick = empty\r\n  var prevKey = ''\r\n  var i, x, y\r\n  if (typeof tokens !== 'undefined') {\r\n    Mexp.addToken(tokens)\r\n  }\r\n  var obj = {}\r\n  for (i = 0; i < inpStr.length; i++) {\r\n    if (inpStr[i] === ' ') {\r\n      continue\r\n    }\r\n    key = ''\r\n    for (x = (inpStr.length - i > (newAr.length - 2) ? newAr.length - 1 : inpStr.length - i); x > 0; x--) {\r\n      if (newAr[x] === undefined) continue;\r\n      for (y = 0; y < newAr[x].length; y++) {\r\n        if (match(inpStr, newAr[x][y], i, x)) {\r\n          key = newAr[x][y]\r\n          y = newAr[x].length\r\n          x = 0\r\n        }\r\n      }\r\n    }\r\n    i += key.length - 1\r\n    if (key === '') {\r\n      throw (new Mexp.Exception('Can\\'t understand after ' + inpStr.slice(i)))\r\n    }\r\n    var index = token.indexOf(key)\r\n    var cToken = key\r\n    var cType = type[index]\r\n    var cEv = eva[index]\r\n    var cPre = preced[cType]\r\n    var cShow = show[index]\r\n    var pre = str[str.length - 1]\r\n    var j\r\n    for (j = ptc.length; j--;) { // loop over ptc\r\n      if (ptc[j] === 0) {\r\n        if ([0, 2, 3, 4, 5, 9, 11, 12, 13].indexOf(cType) !== -1) {\r\n          if (allowed[cType] !== true) {\r\n            throw (new Mexp.Exception(key + ' is not allowed after ' + prevKey))\r\n          }\r\n          str.push(closingParObj)\r\n          allowed = type1\r\n          asterick = type3Asterick\r\n          inc(ptc, -1).pop()\r\n        }\r\n      } else break\r\n    }\r\n    if (allowed[cType] !== true) {\r\n      throw (new Mexp.Exception(key + ' is not allowed after ' + prevKey))\r\n    }\r\n    if (asterick[cType] === true) {\r\n      cType = 2\r\n      cEv = Mexp.math.mul\r\n      cShow = '&times;'\r\n      cPre = 3\r\n      i = i - key.length\r\n    }\r\n    obj = {\r\n      value: cEv,\r\n      type: cType,\r\n      pre: cPre,\r\n      show: cShow\r\n    }\r\n    if (cType === 0) {\r\n      allowed = type0\r\n      asterick = empty\r\n      inc(ptc, 2).push(2)\r\n      str.push(obj)\r\n      str.push(openingParObj)\r\n    } else if (cType === 1) {\r\n      if (pre.type === 1) {\r\n        pre.value += cEv\r\n        inc(ptc, 1)\r\n      } else {\r\n        str.push(obj)\r\n      }\r\n      allowed = type1\r\n      asterick = type1Asterick\r\n    } else if (cType === 2) {\r\n      allowed = type0\r\n      asterick = empty\r\n      inc(ptc, 2)\r\n      str.push(obj)\r\n    } else if (cType === 3) { // constant\r\n      str.push(obj)\r\n      allowed = type1\r\n      asterick = type3Asterick\r\n    } else if (cType === 4) {\r\n      inc(ptc, 1)\r\n      bracToClose++\r\n      allowed = type0\r\n      asterick = empty\r\n      str.push(obj)\r\n    } else if (cType === 5) {\r\n      if (!bracToClose) {\r\n        throw (new Mexp.Exception('Closing parenthesis are more than opening one, wait What!!!'))\r\n      }\r\n      bracToClose--\r\n      allowed = type1\r\n      asterick = type3Asterick\r\n      str.push(obj)\r\n    } else if (cType === 6) {\r\n      if (pre.hasDec) {\r\n        throw (new Mexp.Exception('Two decimals are not allowed in one number'))\r\n      }\r\n      if (pre.type !== 1) {\r\n        pre = {\r\n          value: 0,\r\n          type: 1,\r\n          pre: 0\r\n        } // pre needs to be changed as it will the last value now to be safe in later code\r\n        str.push(pre)\r\n        inc(ptc, -1)\r\n      }\r\n      allowed = type6\r\n      inc(ptc, 1)\r\n      asterick = empty\r\n      pre.value += cEv\r\n      pre.hasDec = true\r\n    } else if (cType === 7) {\r\n      allowed = type1\r\n      asterick = type3Asterick\r\n      inc(ptc, 1)\r\n      str.push(obj)\r\n    }\r\n    if (cType === 8) {\r\n      allowed = type0\r\n      asterick = empty\r\n      inc(ptc, 4).push(4)\r\n      str.push(obj)\r\n      str.push(openingParObj)\r\n    } else if (cType === 9) {\r\n      if (pre.type === 9) {\r\n        if (pre.value === Mexp.math.add) {\r\n          pre.value = cEv\r\n          pre.show = cShow\r\n          inc(ptc, 1)\r\n        } else if (pre.value === Mexp.math.sub && cShow === '-') {\r\n          pre.value = Mexp.math.add\r\n          pre.show = '+'\r\n          inc(ptc, 1)\r\n        }\r\n      } else if (pre.type !== 5 && pre.type !== 7 && pre.type !== 1 && pre.type !== 3 && pre.type !== 13) { // changesign only when negative is found\r\n        if (cToken === '-') { // do nothing for + token\r\n          // don't add with the above if statement as that will run the else statement of parent if on Ctoken +\r\n          allowed = type0\r\n          asterick = empty\r\n          inc(ptc, 2).push(2)\r\n          str.push(changeSignObj)\r\n          str.push(openingParObj)\r\n        }\r\n      } else {\r\n        str.push(obj)\r\n        inc(ptc, 2)\r\n      }\r\n      allowed = type0\r\n      asterick = empty\r\n    } else if (cType === 10) {\r\n      allowed = type0\r\n      asterick = empty\r\n      inc(ptc, 2)\r\n      str.push(obj)\r\n    } else if (cType === 11) {\r\n      allowed = type0\r\n      asterick = empty\r\n      str.push(obj)\r\n    } else if (cType === 12) {\r\n      allowed = type0\r\n      asterick = empty\r\n      inc(ptc, 6).push(6)\r\n      str.push(obj)\r\n      str.push(openingParObj)\r\n    } else if (cType === 13) {\r\n      allowed = type1\r\n      asterick = type3Asterick\r\n      str.push(obj)\r\n    }\r\n    inc(ptc, -1)\r\n    prevKey = key\r\n  }\r\n  for (j = ptc.length; j--;) { // loop over ptc\r\n    if (ptc[j] === 0) {\r\n      str.push(closingParObj)\r\n      inc(ptc, -1).pop()\r\n    } else break  // if it is not zero so before ptc also cant be zero\r\n  }\r\n  if (allowed[5] !== true) {\r\n    throw (new Mexp.Exception('complete the expression'))\r\n  }\r\n  while (bracToClose--) {\r\n    str.push(closingParObj)\r\n  }\r\n\r\n  str.push(closingParObj)\r\n  //        console.log(str);\r\n  return new Mexp(str)\r\n}\r\nmodule.exports = Mexp\r\n"]},"metadata":{},"sourceType":"script"}