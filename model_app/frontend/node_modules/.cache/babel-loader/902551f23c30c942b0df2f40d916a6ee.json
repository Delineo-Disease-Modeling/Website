{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\totti\\\\Documents\\\\jhu class\\\\delineo\\\\Website\\\\model_app\\\\frontend\\\\src\\\\components\\\\Timeseries.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getTimeseries } from '../actions/timeseriesActions.js';\nimport PropTypes from 'prop-types';\nimport SimpleLineChart from './LineChart.js';\n\nclass Timeseries extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      start: \"02-25-20\",\n      end: \"05-03-20\"\n    };\n    this.fips = this.props.demographics ? this.props.demographics.FIPS : 1001;\n  }\n\n  componentDidMount() {\n    this.props.getTimeseries(this.fips, this.state.start, this.state.end);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.demographics !== prevProps.demographics) {\n      const {\n        FIPS\n      } = this.props.demographics;\n      this.props.getTimeseries(FIPS, this.state.start, this.state.end);\n      this.fips = FIPS;\n    }\n  }\n\n  render() {\n    const timeseries = this.props.timeseries;\n    const data = timeseries.map(item => {\n      return {\n        name: `${item.date}`.substring(5, 10),\n        infected: Number(`${item[this.fips].infected}`),\n        deaths: Number(`${item[this.fips].death}`)\n      };\n    });\n    return /*#__PURE__*/React.createElement(SimpleLineChart, {\n      data: data,\n      width: 800,\n      height: 500,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nTimeseries.propTypes = {\n  getTimeseries: PropTypes.func.isRequired,\n  timeseries: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  timeseries: state.timeseries,\n  demographics: state.demographics\n}); // first param of connect: mapStateToProp since state is immutable in Redux Architecture\n// Second param of connect is actions necessary for the component\n\n\nexport default connect(mapStateToProps, {\n  getTimeseries\n})(Timeseries);","map":{"version":3,"sources":["C:/Users/totti/Documents/jhu class/delineo/Website/model_app/frontend/src/components/Timeseries.js"],"names":["React","Component","connect","getTimeseries","PropTypes","SimpleLineChart","Timeseries","constructor","props","state","start","end","fips","demographics","FIPS","componentDidMount","componentDidUpdate","prevProps","render","timeseries","data","map","item","name","date","substring","infected","Number","deaths","death","propTypes","func","isRequired","array","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;;AAEA,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAC/BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAE,UAAR;AAAoBC,MAAAA,GAAG,EAAE;AAAzB,KAAb;AACA,SAAKC,IAAL,GAAY,KAAKJ,KAAL,CAAWK,YAAX,GAA0B,KAAKL,KAAL,CAAWK,YAAX,CAAwBC,IAAlD,GAAyD,IAArE;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKP,KAAL,CAAWL,aAAX,CAAyB,KAAKS,IAA9B,EAAoC,KAAKH,KAAL,CAAWC,KAA/C,EAAsD,KAAKD,KAAL,CAAWE,GAAjE;AACH;;AAEDK,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,QAAI,KAAKT,KAAL,CAAWK,YAAX,KAA4BI,SAAS,CAACJ,YAA1C,EAAwD;AACpD,YAAM;AAACC,QAAAA;AAAD,UAAS,KAAKN,KAAL,CAAWK,YAA1B;AACA,WAAKL,KAAL,CAAWL,aAAX,CAAyBW,IAAzB,EAA+B,KAAKL,KAAL,CAAWC,KAA1C,EAAiD,KAAKD,KAAL,CAAWE,GAA5D;AACA,WAAKC,IAAL,GAAYE,IAAZ;AACH;AACJ;;AAEDI,EAAAA,MAAM,GAAG;AACL,UAAMC,UAAU,GAAG,KAAKX,KAAL,CAAWW,UAA9B;AAEA,UAAMC,IAAI,GAAGD,UAAU,CAACE,GAAX,CAAgBC,IAAD,IAAU;AAClC,aAAO;AAAEC,QAAAA,IAAI,EAAG,GAAED,IAAI,CAACE,IAAK,EAAb,CAAeC,SAAf,CAAyB,CAAzB,EAA2B,EAA3B,CAAR;AAAwCC,QAAAA,QAAQ,EAAEC,MAAM,CAAE,GAAEL,IAAI,CAAC,KAAKV,IAAN,CAAJ,CAAgBc,QAAS,EAA7B,CAAxD;AACHE,QAAAA,MAAM,EAAED,MAAM,CAAE,GAAEL,IAAI,CAAC,KAAKV,IAAN,CAAJ,CAAgBiB,KAAM,EAA1B;AADX,OAAP;AAEH,KAHY,CAAb;AAKA,wBACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAIT,IAAzB;AAA+B,MAAA,KAAK,EAAI,GAAxC;AAA6C,MAAA,MAAM,EAAI,GAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AA9B8B;;AAiCnCd,UAAU,CAACwB,SAAX,GAAuB;AACnB3B,EAAAA,aAAa,EAAEC,SAAS,CAAC2B,IAAV,CAAeC,UADX;AAEnBb,EAAAA,UAAU,EAAGf,SAAS,CAAC6B,KAAV,CAAgBD;AAFV,CAAvB;;AAKA,MAAME,eAAe,GAAIzB,KAAD,KAAY;AAChCU,EAAAA,UAAU,EAAEV,KAAK,CAACU,UADc;AAEhCN,EAAAA,YAAY,EAAEJ,KAAK,CAACI;AAFY,CAAZ,CAAxB,C,CAKA;AACA;;;AACA,eAAeX,OAAO,CAACgC,eAAD,EAAkB;AAAE/B,EAAAA;AAAF,CAAlB,CAAP,CAA4CG,UAA5C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getTimeseries } from '../actions/timeseriesActions.js';\r\nimport PropTypes from 'prop-types';\r\nimport SimpleLineChart from './LineChart.js';\r\n\r\nclass Timeseries extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {start: \"02-25-20\", end: \"05-03-20\"}\r\n        this.fips = this.props.demographics ? this.props.demographics.FIPS : 1001;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getTimeseries(this.fips, this.state.start, this.state.end);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.demographics !== prevProps.demographics) {\r\n            const {FIPS} = this.props.demographics;\r\n            this.props.getTimeseries(FIPS, this.state.start, this.state.end);\r\n            this.fips = FIPS;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const timeseries = this.props.timeseries;\r\n\r\n        const data = timeseries.map((item) => {\r\n            return { name: `${item.date}`.substring(5,10), infected: Number(`${item[this.fips].infected}`),\r\n                deaths: Number(`${item[this.fips].death}`) };\r\n        });\r\n\r\n        return (\r\n            <SimpleLineChart data = {data} width = {800} height = {500}/>\r\n        );\r\n    }\r\n}\r\n\r\nTimeseries.propTypes = {\r\n    getTimeseries: PropTypes.func.isRequired,\r\n    timeseries : PropTypes.array.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    timeseries: state.timeseries,\r\n    demographics: state.demographics\r\n});\r\n\r\n// first param of connect: mapStateToProp since state is immutable in Redux Architecture\r\n// Second param of connect is actions necessary for the component\r\nexport default connect(mapStateToProps, { getTimeseries })(Timeseries);\r\n"]},"metadata":{},"sourceType":"module"}