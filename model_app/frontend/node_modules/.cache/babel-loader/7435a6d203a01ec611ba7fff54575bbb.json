{"ast":null,"code":"import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addPolygon, deletePolygon, resetPolygon } from '../actions/polygonActions';\nimport axios from 'axios';\n\nclass Polygon extends Component {\n  componentDidMount() {\n    this.drawPolygon();\n  }\n\n  drawPolygon({\n    map,\n    mapApi\n  } = this.props) {\n    this.drawingManager = new mapApi.drawing.DrawingManager({\n      drawingMode: mapApi.drawing.OverlayType.POLYGON,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: mapApi.ControlPosition.TOP_CENTER,\n        drawingModes: [//\tgoogle.maps.drawing.OverlayType.MARKER,\n        mapApi.drawing.OverlayType.CIRCLE, mapApi.drawing.OverlayType.POLYGON, //\tgoogle.maps.drawing.OverlayType.POLYLINE,\n        mapApi.drawing.OverlayType.RECTANGLE]\n      },\n      circleOptions: {\n        clickable: true,\n        editable: true //draggable: true\n\n      },\n      polygonOptions: {\n        clickable: true,\n        editable: true //draggable: true\n\n      },\n      rectangleOptions: {\n        clickable: true,\n        editable: true //draggable: true\n\n      }\n    });\n    mapApi.event.addListener(this.drawingManager, 'circlecomplete', function (circle) {\n      console.log(\"drawing circle\");\n      var radius = circle.getRadius();\n      console.log(radius.toString());\n      mapApi.event.addListener(circle, 'radius_changed', function () {\n        console.log(\"editing\");\n        radius = circle.getRadius();\n        console.log(radius.toString());\n      });\n    });\n    mapApi.event.addListener(this.drawingManager, 'rectanglecomplete', function (rectangle) {\n      console.log(\"drawing rectangle\");\n      var bounds = rectangle.getBounds();\n      console.log(bounds.toString()); //this.polygonInfo(bounds.toString());\n\n      mapApi.event.addListener(rectangle, 'bounds_changed', function () {\n        console.log(\"editing\");\n        bounds = rectangle.getBounds();\n        console.log(bounds.toString()); //this.polygonInfo(bounds.toString());\n      });\n    });\n    mapApi.event.addListener(this.drawingManager, 'polygoncomplete', function (polygon) {\n      console.log(\"drawing polygon\");\n      var path = polygon.getPath();\n      console.log(path.getArray().toString()); //this.polygonInfo(path.getArray().toString());\n\n      mapApi.event.addListener(path, 'insert_at', function () {\n        console.log(\"editing\");\n        path = polygon.getPath();\n        console.log(path.getArray().toString()); //this.polygonInfo(path.getArray().toString());\n      });\n      mapApi.event.addListener(path, 'set_at', function () {\n        console.log(\"editing\");\n        path = polygon.getPath();\n        console.log(path.getArray().toString()); //this.polygonInfo(path.getArray().toString());\n      });\n    });\n    this.props.editable ? this.drawingManager.setMap(this.props.map) : this.drawingManager.setMap(null);\n  }\n\n  componentDidUpdate(prevProps) {\n    this.props.editable ? this.drawingManager.setMap(this.props.map) : this.drawingManager.setMap(null);\n\n    if (this.props.place !== prevProps.place) {\n      const {\n        map,\n        place\n      } = this.props; // if we already searched for a place, clear that polygon overlay\n      // clear redux store completely\n\n      if (this.feature) {\n        map.data.remove(this.feature[0]);\n        this.props.resetPolygon();\n      } // get polygon boundaries from nominatim api if they exist\n      // don't use place.name since there are multiple counties with same name\n\n\n      axios.get(`https://nominatim.openstreetmap.org/search?q=${place.formatted_address}&format=json&addressdetails=1&limit=1&polygon_geojson=1`).then(res => {\n        const {\n          0: data\n        } = res['data'];\n\n        if (data['geojson']) {\n          this.polygonOverlay(data['geojson']);\n        } else {\n          // another axios request, if polygon boundaries aren't included in nominatim\n          // use osm id we got from nominatim\n          axios.get(`http://polygons.openstreetmap.fr/get_geojson.py?id=${data['osm_id']}&params=0`).then(results => {\n            this.polygonOverlay(results);\n          });\n        } // add osm relation id to redux store so we have access to it for nearby search\n\n\n        this.props.addPolygon(data['osm_id'], data['osm_type']);\n      }).catch(err => console.log(err));\n    }\n  }\n\n  polygonOverlay(geojson) {\n    let formattedGeojson = geojson;\n\n    if (geojson['type'] !== \"Feature\" && geojson['type'] !== \"FeatureCollection\") {\n      formattedGeojson = {\n        \"type\": \"Feature\",\n        \"geometry\": geojson,\n        \"properties\": {}\n      };\n    }\n\n    this.feature = this.props.map.data.addGeoJson(formattedGeojson);\n  }\n\n  render() {\n    // Same deal with Marker: No rendering necessary\n    return null;\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  place: state.place,\n  polygons: state.polygons // unsure if we need this, currently unused\n\n});\n\nexport default connect(mapStateToProps, {\n  addPolygon,\n  deletePolygon,\n  resetPolygon\n})(Polygon);","map":{"version":3,"sources":["/Users/davidyang/Documents/Website/model_app/frontend/src/components/Polygon.js"],"names":["Component","connect","addPolygon","deletePolygon","resetPolygon","axios","Polygon","componentDidMount","drawPolygon","map","mapApi","props","drawingManager","drawing","DrawingManager","drawingMode","OverlayType","POLYGON","drawingControl","drawingControlOptions","position","ControlPosition","TOP_CENTER","drawingModes","CIRCLE","RECTANGLE","circleOptions","clickable","editable","polygonOptions","rectangleOptions","event","addListener","circle","console","log","radius","getRadius","toString","rectangle","bounds","getBounds","polygon","path","getPath","getArray","setMap","componentDidUpdate","prevProps","place","feature","data","remove","get","formatted_address","then","res","polygonOverlay","results","catch","err","geojson","formattedGeojson","addGeoJson","render","mapStateToProps","state","polygons"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addPolygon, deletePolygon, resetPolygon } from '../actions/polygonActions';\nimport axios from 'axios';\n\nclass Polygon extends Component {\n\n  componentDidMount() {\n    this.drawPolygon();\n  }\n\n  drawPolygon({map,mapApi} = this.props) {\n    this.drawingManager = new mapApi.drawing.DrawingManager({\n      drawingMode: mapApi.drawing.OverlayType.POLYGON,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: mapApi.ControlPosition.TOP_CENTER,\n        drawingModes: [\n          //\tgoogle.maps.drawing.OverlayType.MARKER,\n          mapApi.drawing.OverlayType.CIRCLE,\n          mapApi.drawing.OverlayType.POLYGON,\n          //\tgoogle.maps.drawing.OverlayType.POLYLINE,\n          mapApi.drawing.OverlayType.RECTANGLE\n        ]\n      },\n      circleOptions: {\n        clickable: true,\n        editable: true,\n        //draggable: true\n      },\n      polygonOptions: {\n        clickable: true,\n        editable: true,\n        //draggable: true\n      },\n      rectangleOptions : {\n        clickable: true,\n        editable: true,\n        //draggable: true\n      }\n    });\n\n    mapApi.event.addListener(this.drawingManager, 'circlecomplete', function(circle) {\n      console.log(\"drawing circle\");\n      var radius = circle.getRadius();\n      console.log(radius.toString());\n      mapApi.event.addListener(circle,'radius_changed', function() {\n        console.log(\"editing\");\n        radius = circle.getRadius();\n        console.log(radius.toString());\n      });\n    });\n\n    mapApi.event.addListener(this.drawingManager, 'rectanglecomplete', function(rectangle) {\n      console.log(\"drawing rectangle\");\n      var bounds = rectangle.getBounds();\n      console.log(bounds.toString());\n      //this.polygonInfo(bounds.toString());\n      mapApi.event.addListener(rectangle,'bounds_changed', function() {\n        console.log(\"editing\");\n        bounds = rectangle.getBounds();\n        console.log(bounds.toString());\n        //this.polygonInfo(bounds.toString());\n      });\n    });\n\n    mapApi.event.addListener(this.drawingManager, 'polygoncomplete', function(polygon) {\n      console.log(\"drawing polygon\");\n      var path = polygon.getPath();\n      console.log(path.getArray().toString());\n      //this.polygonInfo(path.getArray().toString());\n      mapApi.event.addListener(path,'insert_at', function() {\n        console.log(\"editing\");\n        path = polygon.getPath();\n        console.log(path.getArray().toString());\n        //this.polygonInfo(path.getArray().toString());\n      });\n      mapApi.event.addListener(path,'set_at', function() {\n        console.log(\"editing\");\n        path = polygon.getPath();\n        console.log(path.getArray().toString());\n        //this.polygonInfo(path.getArray().toString());\n      });\n    });\n\n\n    this.props.editable ? this.drawingManager.setMap(this.props.map) : this.drawingManager.setMap(null);\n\n  }\n\n  componentDidUpdate(prevProps) {\n    this.props.editable ? this.drawingManager.setMap(this.props.map) : this.drawingManager.setMap(null);\n\n    if (this.props.place !== prevProps.place) {\n      const {map, place} = this.props;\n\n      // if we already searched for a place, clear that polygon overlay\n      // clear redux store completely\n      if (this.feature) {\n        map.data.remove(this.feature[0]);\n        this.props.resetPolygon();\n      }\n\n      // get polygon boundaries from nominatim api if they exist\n      // don't use place.name since there are multiple counties with same name\n      axios.get(`https://nominatim.openstreetmap.org/search?q=${place.formatted_address}&format=json&addressdetails=1&limit=1&polygon_geojson=1`)\n        .then(res => {\n          const { 0: data } = res['data'];\n\n          if (data['geojson']) {\n            this.polygonOverlay(data['geojson']);\n          }\n          else {\n            // another axios request, if polygon boundaries aren't included in nominatim\n            // use osm id we got from nominatim\n            axios.get(`http://polygons.openstreetmap.fr/get_geojson.py?id=${data['osm_id']}&params=0`)\n              .then(results => {\n                this.polygonOverlay(results);\n              });\n          }\n\n          // add osm relation id to redux store so we have access to it for nearby search\n          this.props.addPolygon(data['osm_id'], data['osm_type']);\n        })\n        .catch(err => console.log(err));\n    }\n  }\n\n  polygonOverlay(geojson) {\n    let formattedGeojson = geojson;\n    if (geojson['type'] !== \"Feature\" && geojson['type']!== \"FeatureCollection\") {\n      formattedGeojson = { \"type\": \"Feature\", \"geometry\": geojson, \"properties\": {} };\n    }\n    this.feature = this.props.map.data.addGeoJson(formattedGeojson);\n  }\n\n  render() {\n    // Same deal with Marker: No rendering necessary\n    return null;\n  }\n\n\n}\n\nconst mapStateToProps = (state) => ({\n    place: state.place,\n    polygons: state.polygons // unsure if we need this, currently unused\n});\n\nexport default connect(mapStateToProps, { addPolygon, deletePolygon, resetPolygon } )(Polygon);"]},"metadata":{},"sourceType":"module"}