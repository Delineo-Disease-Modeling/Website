{"ast":null,"code":"var _jsxFileName = \"/Users/seamonester/Desktop/Easy Access/Delineo/PandemicModel/model_app/frontend/src/containers/Simulator.js\";\nimport React, { Component } from 'react';\nimport { Place, GoogleMap, Parameters, OptionMenu, SimulationTimeseries } from '../components';\nimport './Simulator.css';\nimport axios from 'axios';\n\nclass Simulator extends Component {\n  constructor() {\n    super();\n\n    this.handleOnClick = () => {\n      // if user had an existing job request, delete that \n      if (this.state.jobId) {\n        axios.delete(`./simulations/${this.state.jobId}`, {\n          cancelToken: this.source.token\n        }).catch(err => {\n          if (axios.isCancel(err)) {\n            console.log('Request canceled:', err.message);\n          } else {\n            console.log(err);\n          }\n        });\n      } // configure post body with specific model params\n\n\n      let body = {}; // send post request\n\n      axios.post('./simulations', body, {\n        cancelToken: this.source.token\n      }).then(res => {\n        // only upon successful post request, update state with in progress state and \n        if (res.status === 200) {\n          this._isMounted && this.setState({\n            jobId: `${res.data}`,\n            loading: true\n          });\n          console.log('post sent with job id ' + res.data);\n          axios.get(`./simulations/${res.data}`, {\n            cancelToken: this.source.token\n          }).then(result => {\n            this._isMounted && this.setState({\n              loading: false,\n              data: [...result.data]\n            });\n            console.log('simulation finished running');\n          }).catch(err => {\n            if (axios.isCancel(err)) {\n              console.log('Request canceled:', err.message);\n            } else {\n              console.log(err);\n            }\n          }); // should probably save data to redux store\n          // maybe also save jobId? idk yet\n        }\n      }).catch(err => {\n        if (axios.isCancel(err)) {\n          console.log('Request canceled:', err.message);\n        } else {\n          console.log(err);\n        }\n      });\n    };\n\n    this.state = {\n      hidden: false,\n      policy: '',\n      data: [],\n      loading: false,\n      jobId: null\n    };\n    this._isMounted = false;\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.source = axios.CancelToken.source();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    this.source.cancel('Operation canceled by the user.'); // remove existing job request, if it existed\n\n    if (this.state.jobId) {\n      axios.delete(`./simulations/${this.state.jobId}`).catch(err => console.log(err));\n    }\n  }\n\n  render() {\n    const {\n      data,\n      jobId,\n      loading\n    } = this.state; // no timeseries: replace with simulation timeseries\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"CardBackground\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"GreenBackground\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, \"Map\"), /*#__PURE__*/React.createElement(Place, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(GoogleMap, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"GreenBackground\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, \"Configurations\"), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: 'left',\n        fontSize: '20px',\n        color: '#66FCF1'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, \"Model Parameters\"), /*#__PURE__*/React.createElement(Parameters, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: 'left',\n        fontSize: '20px',\n        color: '#66FCF1',\n        marginTop: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, \"Intervention Policy\"), /*#__PURE__*/React.createElement(OptionMenu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: this.handleOnClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    }, \"Run Simulation\")), jobId ? loading ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 37\n      }\n    }, \"loading...\") : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"GreenBackground\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, \"Analysis\"), /*#__PURE__*/React.createElement(SimulationTimeseries, {\n      infected: data[1],\n      deaths: data[2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    })) : null);\n  }\n\n}\n\nexport default Simulator;","map":{"version":3,"sources":["/Users/seamonester/Desktop/Easy Access/Delineo/PandemicModel/model_app/frontend/src/containers/Simulator.js"],"names":["React","Component","Place","GoogleMap","Parameters","OptionMenu","SimulationTimeseries","axios","Simulator","constructor","handleOnClick","state","jobId","delete","cancelToken","source","token","catch","err","isCancel","console","log","message","body","post","then","res","status","_isMounted","setState","data","loading","get","result","hidden","policy","componentDidMount","CancelToken","componentWillUnmount","cancel","render","textAlign","fontSize","color","marginTop"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Place, GoogleMap, Parameters, OptionMenu, SimulationTimeseries } from '../components';\nimport './Simulator.css'\nimport axios from 'axios';\n\nclass Simulator extends Component{\n\n    constructor(){\n        super();\n        this.state={\n            hidden:false,\n            policy:'',\n            data: [],\n            loading: false,\n            jobId: null\n        };\n        this._isMounted = false;\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n        this.source = axios.CancelToken.source();\n    }\n\n    handleOnClick = () => {\n        // if user had an existing job request, delete that \n        if (this.state.jobId) {\n            axios.delete(`./simulations/${this.state.jobId}`, {cancelToken: this.source.token})\n            .catch(err => {\n                    if (axios.isCancel(err)) {\n                        console.log('Request canceled:', err.message);\n                    } else { console.log(err) }\n                });\n        }\n\n        // configure post body with specific model params\n        let body = {};\n\n        // send post request\n        axios.post('./simulations', body, { cancelToken: this.source.token })\n            .then(res => {\n                // only upon successful post request, update state with in progress state and \n                if (res.status === 200) {\n                    this._isMounted && this.setState({jobId: `${res.data}`, loading: true});\n                    console.log('post sent with job id ' + res.data);\n\n                    axios.get(`./simulations/${res.data}`, {cancelToken: this.source.token})\n                        .then(result => {\n                            this._isMounted && this.setState({ loading: false, data: [...result.data] });\n                            console.log('simulation finished running');\n                        })\n                        .catch(err => {\n                            if (axios.isCancel(err)) {\n                                console.log('Request canceled:', err.message);\n                            } else { console.log(err) }\n                        });\n\n                    // should probably save data to redux store\n                    // maybe also save jobId? idk yet\n                }\n            })\n            .catch(err => {\n                if (axios.isCancel(err)) {\n                    console.log('Request canceled:', err.message);\n                } else { console.log(err) }\n            });\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        this.source.cancel('Operation canceled by the user.');\n\n        // remove existing job request, if it existed\n        if (this.state.jobId) {\n            axios.delete(`./simulations/${this.state.jobId}`)\n                .catch(err => console.log(err) );\n        }\n    }\n\n    render(){\n        const {data, jobId, loading} = this.state;\n\n        // no timeseries: replace with simulation timeseries\n        return(\n            <div className='CardBackground'>\n\n                <div className='GreenBackground'>\n                    <h3>Map</h3>\n                    <Place/>\n                    <GoogleMap/> \n                </div>\n\n                <div className='GreenBackground'>\n                    <h3>Configurations</h3>\n                    <p style={{textAlign:'left', fontSize:'20px', color:'#66FCF1'}}>Model Parameters</p>\n                    <Parameters/>\n                    <p style={{textAlign:'left', fontSize:'20px', color:'#66FCF1', marginTop:'20px'}}>Intervention Policy</p>\n\n                    <OptionMenu/>\n\n                    \n                    <br></br>\n                    <button className='button' onClick={this.handleOnClick}>Run Simulation</button>\n                </div>\n                \n                {jobId ? (loading ? <p>loading...</p> :\n                <div className='GreenBackground'>\n                    <h3>Analysis</h3>\n                    <SimulationTimeseries infected={data[1]} deaths={data[2]}/>\n                </div>)\n                 : null}\n            </div>\n        );\n\n    }\n\n}\n\nexport default Simulator;"]},"metadata":{},"sourceType":"module"}