{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mathias\\\\Documents\\\\Delineo\\\\Website\\\\model_app\\\\frontend\\\\src\\\\components\\\\SearchBox.js\";\nimport React, { Component } from 'react'; // SearchBox is a stateless component that handles search box operations like\n// clicking on the box, typing/autocomplete, and most importantly saving the\n// searched location in our redux store\n\nclass SearchBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onPlacesChanged = ({\n      map,\n      addplace\n    } = this.props) => {\n      // if we already searched for a place, clear that polygon overlay\n      if (this.feature) {\n        map.data.remove(this.feature[0]);\n      } // update with new searched place\n\n\n      const selected = this.searchBox.getPlaces();\n      const {\n        0: place\n      } = selected; // add to redux store\n\n      addplace(place);\n      if (!place.geometry) return;\n\n      if (place.geometry.viewport) {\n        map.fitBounds(place.geometry.viewport);\n      } else {\n        map.setCenter(place.geometry.location);\n        map.setZoom(17);\n      }\n\n      this.searchInput.blur();\n    };\n\n    this.clearSearchBox = this.clearSearchBox.bind(this);\n  }\n\n  componentDidMount({\n    map,\n    mapApi\n  } = this.props) {\n    this.searchBox = new mapApi.places.SearchBox(this.searchInput);\n    this.searchBox.addListener('places_changed', this.onPlacesChanged);\n    this.searchBox.bindTo('bounds', map);\n  }\n\n  componentWillUnmount({\n    mapApi\n  } = this.props) {\n    mapApi.event.clearInstanceListeners(this.searchInput);\n  } // change map view and save the place in redux store (this is addplace method passed from props)\n\n\n  polygonOverlay(geojson) {\n    let formattedGeojson = geojson;\n\n    if (geojson['type'] !== \"Feature\" && geojson['type'] !== \"FeatureCollection\") {\n      formattedGeojson = {\n        \"type\": \"Feature\",\n        \"geometry\": geojson,\n        \"properties\": {}\n      };\n    }\n\n    this.feature = this.props.map.data.addGeoJson(formattedGeojson);\n  }\n\n  clearSearchBox() {\n    this.searchInput.value = '';\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: '30px',\n        marginBottom: '15px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      ref: ref => {\n        this.searchInput = ref;\n      },\n      type: \"text\",\n      onFocus: this.clearSearchBox,\n      placeholder: \"Enter a location\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default SearchBox;","map":{"version":3,"sources":["C:/Users/Mathias/Documents/Delineo/Website/model_app/frontend/src/components/SearchBox.js"],"names":["React","Component","SearchBox","constructor","props","onPlacesChanged","map","addplace","feature","data","remove","selected","searchBox","getPlaces","place","geometry","viewport","fitBounds","setCenter","location","setZoom","searchInput","blur","clearSearchBox","bind","componentDidMount","mapApi","places","addListener","bindTo","componentWillUnmount","event","clearInstanceListeners","polygonOverlay","geojson","formattedGeojson","addGeoJson","value","render","marginTop","marginBottom","ref"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\n\r\n// SearchBox is a stateless component that handles search box operations like\r\n// clicking on the box, typing/autocomplete, and most importantly saving the\r\n// searched location in our redux store\r\nclass SearchBox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.clearSearchBox = this.clearSearchBox.bind(this);\r\n  }\r\n\r\n  componentDidMount({ map, mapApi } = this.props) {\r\n    this.searchBox = new mapApi.places.SearchBox(this.searchInput);\r\n    this.searchBox.addListener('places_changed', this.onPlacesChanged);\r\n    this.searchBox.bindTo('bounds', map);\r\n  }\r\n\r\n  componentWillUnmount({ mapApi } = this.props) {\r\n    mapApi.event.clearInstanceListeners(this.searchInput);\r\n  }\r\n\r\n  // change map view and save the place in redux store (this is addplace method passed from props)\r\n  onPlacesChanged = ({ map, addplace } = this.props) => {\r\n  \t// if we already searched for a place, clear that polygon overlay\r\n  \tif (this.feature) {\r\n  \t\tmap.data.remove(this.feature[0]);\r\n  \t}\r\n\r\n  \t// update with new searched place\r\n    const selected = this.searchBox.getPlaces();\r\n    const { 0: place } = selected;\r\n\r\n    // add to redux store\r\n    addplace(place);\r\n\r\n    if (!place.geometry) return;\r\n    if (place.geometry.viewport) {\r\n      map.fitBounds(place.geometry.viewport);\r\n    } else {\r\n      map.setCenter(place.geometry.location);\r\n      map.setZoom(17);\r\n    }\r\n\r\n    this.searchInput.blur();\r\n  };\r\n\r\n  polygonOverlay(geojson) {\r\n  \tlet formattedGeojson = geojson;\r\n  \tif (geojson['type'] !== \"Feature\" && geojson['type']!== \"FeatureCollection\") {\r\n  \t\tformattedGeojson = { \"type\": \"Feature\", \"geometry\": geojson, \"properties\": {} };\r\n  \t}\r\n  \tthis.feature = this.props.map.data.addGeoJson(formattedGeojson);\r\n  }\r\n\r\n  clearSearchBox() {\r\n    this.searchInput.value = '';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{marginTop:'30px', marginBottom:'15px'}}>\r\n        <input\r\n          ref={(ref) => {\r\n            this.searchInput = ref;\r\n          }}\r\n          type=\"text\"\r\n          onFocus={this.clearSearchBox}\r\n          placeholder=\"Enter a location\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;"]},"metadata":{},"sourceType":"module"}