{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mathias\\\\Documents\\\\Delineo\\\\Website\\\\model_app\\\\frontend\\\\src\\\\components\\\\Place.js\";\nimport React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { getDemographics } from '../actions/demographicsActions';\nimport PropTypes from 'prop-types';\n\nclass Place extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateDemographics = place => {\n      let state = \"\";\n      let county = \"\"; // find the state and county the searched location resides in\n      // administrative_area_level_# is defined by Google Maps API\n\n      for (let key = 0; key < place.length; key++) {\n        if (place[key].types[0] === \"administrative_area_level_1\") state = place[key].short_name;else if (place[key].types[0] === \"administrative_area_level_2\") county = place[key].short_name;\n      }\n\n      if (!state || !county) {\n        // error handling here\n        console.log('Not a county');\n      } else {\n        // api call to our db to get demographics info\n        this.props.getDemographics(state, county);\n      }\n    };\n  }\n\n  // initialization (DOM rendered)\n  componentDidMount() {\n    // initialize with actual data if a search was performed\n    // otherwise, initialize with info from Autauga County\n    if (this.props.place) {\n      this.updateDemographics(this.props.place);\n    } else {\n      this.props.getDemographics('AL', 'Autauga County');\n    }\n  } // only rerender if props.place has changed (i.e. the location in the search box)\n\n\n  componentDidUpdate(prevProps) {\n    if (this.props.place !== prevProps.place) {\n      this.updateDemographics(this.props.place);\n    }\n  }\n\n  render() {\n    const {\n      FIPS,\n      Area_Name,\n      POP_ESTIMATE_2018\n    } = this.props.demographics;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: '#1b4441ad',\n        height: '55px',\n        textAlign: 'center',\n        paddingTop: '13px',\n        border: '2px solid #66FCF1',\n        borderRadius: '40px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, \"The county with FIPS: \", FIPS, \" is in \", Area_Name, \" and has population \", POP_ESTIMATE_2018)));\n  }\n\n}\n\nPlace.propTypes = {\n  getDemographics: PropTypes.func.isRequired,\n  demographics: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  demographics: state.demographics,\n  place: state.place['address_components']\n}); // first param of connect: mapStateToProp since state is immutable in Redux Architecture\n// Second param of connect is actions necessary for the component\n\n\nexport default connect(mapStateToProps, {\n  getDemographics\n})(Place);","map":{"version":3,"sources":["C:/Users/Mathias/Documents/Delineo/Website/model_app/frontend/src/components/Place.js"],"names":["React","Component","Container","connect","getDemographics","PropTypes","Place","updateDemographics","place","state","county","key","length","types","short_name","console","log","props","componentDidMount","componentDidUpdate","prevProps","render","FIPS","Area_Name","POP_ESTIMATE_2018","demographics","backgroundColor","height","textAlign","paddingTop","border","borderRadius","color","propTypes","func","isRequired","object","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,KAAN,SAAoBL,SAApB,CAA8B;AAAA;AAAA;;AAAA,SAoB1BM,kBApB0B,GAoBJC,KAAD,IAAW;AAC5B,UAAIC,KAAK,GAAG,EAAZ;AACA,UAAIC,MAAM,GAAG,EAAb,CAF4B,CAI5B;AACA;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,KAAK,CAACI,MAA9B,EAAsCD,GAAG,EAAzC,EAA6C;AACzC,YAAIH,KAAK,CAACG,GAAD,CAAL,CAAWE,KAAX,CAAiB,CAAjB,MAAwB,6BAA5B,EACIJ,KAAK,GAAGD,KAAK,CAACG,GAAD,CAAL,CAAWG,UAAnB,CADJ,KAEK,IAAIN,KAAK,CAACG,GAAD,CAAL,CAAWE,KAAX,CAAiB,CAAjB,MAAwB,6BAA5B,EACDH,MAAM,GAAGF,KAAK,CAACG,GAAD,CAAL,CAAWG,UAApB;AACP;;AAED,UAAI,CAACL,KAAD,IAAU,CAACC,MAAf,EAAuB;AACnB;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,OAHD,MAGO;AACH;AACA,aAAKC,KAAL,CAAWb,eAAX,CAA2BK,KAA3B,EAAkCC,MAAlC;AACH;AACJ,KAxCyB;AAAA;;AAC1B;AACAQ,EAAAA,iBAAiB,GAAG;AAChB;AACA;AACA,QAAI,KAAKD,KAAL,CAAWT,KAAf,EAAsB;AAClB,WAAKD,kBAAL,CAAwB,KAAKU,KAAL,CAAWT,KAAnC;AACH,KAFD,MAGK;AACD,WAAKS,KAAL,CAAWb,eAAX,CAA2B,IAA3B,EAAiC,gBAAjC;AACH;AACJ,GAXyB,CAa1B;;;AACAe,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,QAAI,KAAKH,KAAL,CAAWT,KAAX,KAAqBY,SAAS,CAACZ,KAAnC,EAA0C;AACtC,WAAKD,kBAAL,CAAwB,KAAKU,KAAL,CAAWT,KAAnC;AACH;AACJ;;AAwBDa,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,SAAR;AAAmBC,MAAAA;AAAnB,QAAyC,KAAKP,KAAL,CAAWQ,YAA1D;AAEA,wBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,eAAe,EAAC,WAAjB;AAA8BC,QAAAA,MAAM,EAAC,MAArC;AAA6CC,QAAAA,SAAS,EAAC,QAAvD;AAAiEC,QAAAA,UAAU,EAAC,MAA5E;AAAoFC,QAAAA,MAAM,EAAC,mBAA3F;AAAgHC,QAAAA,YAAY,EAAC;AAA7H,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAC;AAAR,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAC2BV,IAD3B,aACwCC,SADxC,0BAEoBC,iBAFpB,CADJ,CADJ,CADJ;AAWH;;AAxDyB;;AA4D9BlB,KAAK,CAAC2B,SAAN,GAAkB;AACd7B,EAAAA,eAAe,EAAEC,SAAS,CAAC6B,IAAV,CAAeC,UADlB;AAEdV,EAAAA,YAAY,EAAGpB,SAAS,CAAC+B,MAAV,CAAiBD;AAFlB,CAAlB;;AAKA,MAAME,eAAe,GAAI5B,KAAD,KAAY;AAChCgB,EAAAA,YAAY,EAAEhB,KAAK,CAACgB,YADY;AAEhCjB,EAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAY,oBAAZ;AAFyB,CAAZ,CAAxB,C,CAKA;AACA;;;AACA,eAAeL,OAAO,CAACkC,eAAD,EAAkB;AAAEjC,EAAAA;AAAF,CAAlB,CAAP,CAA8CE,KAA9C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { getDemographics } from '../actions/demographicsActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Place extends Component {\r\n    // initialization (DOM rendered)\r\n    componentDidMount() {\r\n        // initialize with actual data if a search was performed\r\n        // otherwise, initialize with info from Autauga County\r\n        if (this.props.place) {\r\n            this.updateDemographics(this.props.place);\r\n        }\r\n        else {\r\n            this.props.getDemographics('AL', 'Autauga County');\r\n        }\r\n    }\r\n\r\n    // only rerender if props.place has changed (i.e. the location in the search box)\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.place !== prevProps.place) {\r\n            this.updateDemographics(this.props.place);\r\n        }\r\n    }\r\n\r\n    updateDemographics = (place) => {\r\n        let state = \"\";\r\n        let county = \"\";\r\n\r\n        // find the state and county the searched location resides in\r\n        // administrative_area_level_# is defined by Google Maps API\r\n        for (let key = 0; key < place.length; key++) {\r\n            if (place[key].types[0] === \"administrative_area_level_1\")\r\n                state = place[key].short_name;\r\n            else if (place[key].types[0] === \"administrative_area_level_2\")\r\n                county = place[key].short_name;\r\n        }\r\n\r\n        if (!state || !county) {\r\n            // error handling here\r\n            console.log('Not a county');\r\n        } else {\r\n            // api call to our db to get demographics info\r\n            this.props.getDemographics(state, county);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { FIPS, Area_Name, POP_ESTIMATE_2018 } = this.props.demographics;\r\n\r\n        return (\r\n            <Container>\r\n                <div style={{backgroundColor:'#1b4441ad', height:'55px', textAlign:'center', paddingTop:'13px', border:'2px solid #66FCF1', borderRadius:'40px'}}>\r\n                    <h6 style={{ color:'white'}}>\r\n                        The county with FIPS: {FIPS} is in {Area_Name} and \r\n                        has population {POP_ESTIMATE_2018}\r\n                    </h6>\r\n                </div>\r\n                        \r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nPlace.propTypes = {\r\n    getDemographics: PropTypes.func.isRequired,\r\n    demographics : PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    demographics: state.demographics,\r\n    place: state.place['address_components']\r\n});\r\n\r\n// first param of connect: mapStateToProp since state is immutable in Redux Architecture\r\n// Second param of connect is actions necessary for the component\r\nexport default connect(mapStateToProps, { getDemographics })(Place);\r\n"]},"metadata":{},"sourceType":"module"}