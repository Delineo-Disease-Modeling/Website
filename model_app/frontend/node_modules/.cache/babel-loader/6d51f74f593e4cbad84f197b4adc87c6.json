{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport verifySubselectors from './verifySubselectors';\nexport function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {\n  return function impureFinalPropsSelector(state, ownProps) {\n    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);\n  };\n}\nexport function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {\n  var areStatesEqual = _ref.areStatesEqual,\n      areOwnPropsEqual = _ref.areOwnPropsEqual,\n      areStatePropsEqual = _ref.areStatePropsEqual;\n  var hasRunAtLeastOnce = false;\n  var state;\n  var ownProps;\n  var stateProps;\n  var dispatchProps;\n  var mergedProps;\n\n  function handleFirstCall(firstState, firstOwnProps) {\n    state = firstState;\n    ownProps = firstOwnProps;\n    stateProps = mapStateToProps(state, ownProps);\n    dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    hasRunAtLeastOnce = true;\n    return mergedProps;\n  }\n\n  function handleNewPropsAndNewState() {\n    stateProps = mapStateToProps(state, ownProps);\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleNewProps() {\n    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleNewState() {\n    var nextStateProps = mapStateToProps(state, ownProps);\n    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);\n    stateProps = nextStateProps;\n    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleSubsequentCalls(nextState, nextOwnProps) {\n    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);\n    var stateChanged = !areStatesEqual(nextState, state);\n    state = nextState;\n    ownProps = nextOwnProps;\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState();\n    if (propsChanged) return handleNewProps();\n    if (stateChanged) return handleNewState();\n    return mergedProps;\n  }\n\n  return function pureFinalPropsSelector(nextState, nextOwnProps) {\n    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);\n  };\n} // TODO: Add more comments\n// If pure is true, the selector returned by selectorFactory will memoize its results,\n// allowing connectAdvanced's shouldComponentUpdate to return false if final\n// props have not changed. If false, the selector will always return a new\n// object and shouldComponentUpdate will always return true.\n\nexport default function finalPropsSelectorFactory(dispatch, _ref2) {\n  var initMapStateToProps = _ref2.initMapStateToProps,\n      initMapDispatchToProps = _ref2.initMapDispatchToProps,\n      initMergeProps = _ref2.initMergeProps,\n      options = _objectWithoutPropertiesLoose(_ref2, [\"initMapStateToProps\", \"initMapDispatchToProps\", \"initMergeProps\"]);\n\n  var mapStateToProps = initMapStateToProps(dispatch, options);\n  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);\n  var mergeProps = initMergeProps(dispatch, options);\n\n  if (process.env.NODE_ENV !== 'production') {\n    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);\n  }\n\n  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;\n  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);\n}","map":{"version":3,"sources":["C:/Users/totti/Documents/jhu class/delineo/Website/model_app/frontend/node_modules/react-redux/es/connect/selectorFactory.js"],"names":["_objectWithoutPropertiesLoose","verifySubselectors","impureFinalPropsSelectorFactory","mapStateToProps","mapDispatchToProps","mergeProps","dispatch","impureFinalPropsSelector","state","ownProps","pureFinalPropsSelectorFactory","_ref","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","hasRunAtLeastOnce","stateProps","dispatchProps","mergedProps","handleFirstCall","firstState","firstOwnProps","handleNewPropsAndNewState","dependsOnOwnProps","handleNewProps","handleNewState","nextStateProps","statePropsChanged","handleSubsequentCalls","nextState","nextOwnProps","propsChanged","stateChanged","pureFinalPropsSelector","finalPropsSelectorFactory","_ref2","initMapStateToProps","initMapDispatchToProps","initMergeProps","options","process","env","NODE_ENV","displayName","selectorFactory","pure"],"mappings":"AAAA,OAAOA,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAO,SAASC,+BAAT,CAAyCC,eAAzC,EAA0DC,kBAA1D,EAA8EC,UAA9E,EAA0FC,QAA1F,EAAoG;AACzG,SAAO,SAASC,wBAAT,CAAkCC,KAAlC,EAAyCC,QAAzC,EAAmD;AACxD,WAAOJ,UAAU,CAACF,eAAe,CAACK,KAAD,EAAQC,QAAR,CAAhB,EAAmCL,kBAAkB,CAACE,QAAD,EAAWG,QAAX,CAArD,EAA2EA,QAA3E,CAAjB;AACD,GAFD;AAGD;AACD,OAAO,SAASC,6BAAT,CAAuCP,eAAvC,EAAwDC,kBAAxD,EAA4EC,UAA5E,EAAwFC,QAAxF,EAAkGK,IAAlG,EAAwG;AAC7G,MAAIC,cAAc,GAAGD,IAAI,CAACC,cAA1B;AAAA,MACIC,gBAAgB,GAAGF,IAAI,CAACE,gBAD5B;AAAA,MAEIC,kBAAkB,GAAGH,IAAI,CAACG,kBAF9B;AAGA,MAAIC,iBAAiB,GAAG,KAAxB;AACA,MAAIP,KAAJ;AACA,MAAIC,QAAJ;AACA,MAAIO,UAAJ;AACA,MAAIC,aAAJ;AACA,MAAIC,WAAJ;;AAEA,WAASC,eAAT,CAAyBC,UAAzB,EAAqCC,aAArC,EAAoD;AAClDb,IAAAA,KAAK,GAAGY,UAAR;AACAX,IAAAA,QAAQ,GAAGY,aAAX;AACAL,IAAAA,UAAU,GAAGb,eAAe,CAACK,KAAD,EAAQC,QAAR,CAA5B;AACAQ,IAAAA,aAAa,GAAGb,kBAAkB,CAACE,QAAD,EAAWG,QAAX,CAAlC;AACAS,IAAAA,WAAW,GAAGb,UAAU,CAACW,UAAD,EAAaC,aAAb,EAA4BR,QAA5B,CAAxB;AACAM,IAAAA,iBAAiB,GAAG,IAApB;AACA,WAAOG,WAAP;AACD;;AAED,WAASI,yBAAT,GAAqC;AACnCN,IAAAA,UAAU,GAAGb,eAAe,CAACK,KAAD,EAAQC,QAAR,CAA5B;AACA,QAAIL,kBAAkB,CAACmB,iBAAvB,EAA0CN,aAAa,GAAGb,kBAAkB,CAACE,QAAD,EAAWG,QAAX,CAAlC;AAC1CS,IAAAA,WAAW,GAAGb,UAAU,CAACW,UAAD,EAAaC,aAAb,EAA4BR,QAA5B,CAAxB;AACA,WAAOS,WAAP;AACD;;AAED,WAASM,cAAT,GAA0B;AACxB,QAAIrB,eAAe,CAACoB,iBAApB,EAAuCP,UAAU,GAAGb,eAAe,CAACK,KAAD,EAAQC,QAAR,CAA5B;AACvC,QAAIL,kBAAkB,CAACmB,iBAAvB,EAA0CN,aAAa,GAAGb,kBAAkB,CAACE,QAAD,EAAWG,QAAX,CAAlC;AAC1CS,IAAAA,WAAW,GAAGb,UAAU,CAACW,UAAD,EAAaC,aAAb,EAA4BR,QAA5B,CAAxB;AACA,WAAOS,WAAP;AACD;;AAED,WAASO,cAAT,GAA0B;AACxB,QAAIC,cAAc,GAAGvB,eAAe,CAACK,KAAD,EAAQC,QAAR,CAApC;AACA,QAAIkB,iBAAiB,GAAG,CAACb,kBAAkB,CAACY,cAAD,EAAiBV,UAAjB,CAA3C;AACAA,IAAAA,UAAU,GAAGU,cAAb;AACA,QAAIC,iBAAJ,EAAuBT,WAAW,GAAGb,UAAU,CAACW,UAAD,EAAaC,aAAb,EAA4BR,QAA5B,CAAxB;AACvB,WAAOS,WAAP;AACD;;AAED,WAASU,qBAAT,CAA+BC,SAA/B,EAA0CC,YAA1C,EAAwD;AACtD,QAAIC,YAAY,GAAG,CAAClB,gBAAgB,CAACiB,YAAD,EAAerB,QAAf,CAApC;AACA,QAAIuB,YAAY,GAAG,CAACpB,cAAc,CAACiB,SAAD,EAAYrB,KAAZ,CAAlC;AACAA,IAAAA,KAAK,GAAGqB,SAAR;AACApB,IAAAA,QAAQ,GAAGqB,YAAX;AACA,QAAIC,YAAY,IAAIC,YAApB,EAAkC,OAAOV,yBAAyB,EAAhC;AAClC,QAAIS,YAAJ,EAAkB,OAAOP,cAAc,EAArB;AAClB,QAAIQ,YAAJ,EAAkB,OAAOP,cAAc,EAArB;AAClB,WAAOP,WAAP;AACD;;AAED,SAAO,SAASe,sBAAT,CAAgCJ,SAAhC,EAA2CC,YAA3C,EAAyD;AAC9D,WAAOf,iBAAiB,GAAGa,qBAAqB,CAACC,SAAD,EAAYC,YAAZ,CAAxB,GAAoDX,eAAe,CAACU,SAAD,EAAYC,YAAZ,CAA3F;AACD,GAFD;AAGD,C,CAAC;AACF;AACA;AACA;AACA;;AAEA,eAAe,SAASI,yBAAT,CAAmC5B,QAAnC,EAA6C6B,KAA7C,EAAoD;AACjE,MAAIC,mBAAmB,GAAGD,KAAK,CAACC,mBAAhC;AAAA,MACIC,sBAAsB,GAAGF,KAAK,CAACE,sBADnC;AAAA,MAEIC,cAAc,GAAGH,KAAK,CAACG,cAF3B;AAAA,MAGIC,OAAO,GAAGvC,6BAA6B,CAACmC,KAAD,EAAQ,CAAC,qBAAD,EAAwB,wBAAxB,EAAkD,gBAAlD,CAAR,CAH3C;;AAKA,MAAIhC,eAAe,GAAGiC,mBAAmB,CAAC9B,QAAD,EAAWiC,OAAX,CAAzC;AACA,MAAInC,kBAAkB,GAAGiC,sBAAsB,CAAC/B,QAAD,EAAWiC,OAAX,CAA/C;AACA,MAAIlC,UAAU,GAAGiC,cAAc,CAAChC,QAAD,EAAWiC,OAAX,CAA/B;;AAEA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCzC,IAAAA,kBAAkB,CAACE,eAAD,EAAkBC,kBAAlB,EAAsCC,UAAtC,EAAkDkC,OAAO,CAACI,WAA1D,CAAlB;AACD;;AAED,MAAIC,eAAe,GAAGL,OAAO,CAACM,IAAR,GAAenC,6BAAf,GAA+CR,+BAArE;AACA,SAAO0C,eAAe,CAACzC,eAAD,EAAkBC,kBAAlB,EAAsCC,UAAtC,EAAkDC,QAAlD,EAA4DiC,OAA5D,CAAtB;AACD","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport verifySubselectors from './verifySubselectors';\r\nexport function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {\r\n  return function impureFinalPropsSelector(state, ownProps) {\r\n    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);\r\n  };\r\n}\r\nexport function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {\r\n  var areStatesEqual = _ref.areStatesEqual,\r\n      areOwnPropsEqual = _ref.areOwnPropsEqual,\r\n      areStatePropsEqual = _ref.areStatePropsEqual;\r\n  var hasRunAtLeastOnce = false;\r\n  var state;\r\n  var ownProps;\r\n  var stateProps;\r\n  var dispatchProps;\r\n  var mergedProps;\r\n\r\n  function handleFirstCall(firstState, firstOwnProps) {\r\n    state = firstState;\r\n    ownProps = firstOwnProps;\r\n    stateProps = mapStateToProps(state, ownProps);\r\n    dispatchProps = mapDispatchToProps(dispatch, ownProps);\r\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\r\n    hasRunAtLeastOnce = true;\r\n    return mergedProps;\r\n  }\r\n\r\n  function handleNewPropsAndNewState() {\r\n    stateProps = mapStateToProps(state, ownProps);\r\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\r\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\r\n    return mergedProps;\r\n  }\r\n\r\n  function handleNewProps() {\r\n    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);\r\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\r\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\r\n    return mergedProps;\r\n  }\r\n\r\n  function handleNewState() {\r\n    var nextStateProps = mapStateToProps(state, ownProps);\r\n    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);\r\n    stateProps = nextStateProps;\r\n    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\r\n    return mergedProps;\r\n  }\r\n\r\n  function handleSubsequentCalls(nextState, nextOwnProps) {\r\n    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);\r\n    var stateChanged = !areStatesEqual(nextState, state);\r\n    state = nextState;\r\n    ownProps = nextOwnProps;\r\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState();\r\n    if (propsChanged) return handleNewProps();\r\n    if (stateChanged) return handleNewState();\r\n    return mergedProps;\r\n  }\r\n\r\n  return function pureFinalPropsSelector(nextState, nextOwnProps) {\r\n    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);\r\n  };\r\n} // TODO: Add more comments\r\n// If pure is true, the selector returned by selectorFactory will memoize its results,\r\n// allowing connectAdvanced's shouldComponentUpdate to return false if final\r\n// props have not changed. If false, the selector will always return a new\r\n// object and shouldComponentUpdate will always return true.\r\n\r\nexport default function finalPropsSelectorFactory(dispatch, _ref2) {\r\n  var initMapStateToProps = _ref2.initMapStateToProps,\r\n      initMapDispatchToProps = _ref2.initMapDispatchToProps,\r\n      initMergeProps = _ref2.initMergeProps,\r\n      options = _objectWithoutPropertiesLoose(_ref2, [\"initMapStateToProps\", \"initMapDispatchToProps\", \"initMergeProps\"]);\r\n\r\n  var mapStateToProps = initMapStateToProps(dispatch, options);\r\n  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);\r\n  var mergeProps = initMergeProps(dispatch, options);\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);\r\n  }\r\n\r\n  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;\r\n  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);\r\n}"]},"metadata":{},"sourceType":"module"}