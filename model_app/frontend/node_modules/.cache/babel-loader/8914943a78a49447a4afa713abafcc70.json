{"ast":null,"code":"var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n/** Used to compose bitmasks for value comparisons. */\n\n\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n/**\r\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\r\n *\r\n * @private\r\n * @param {string} path The path of the property to get.\r\n * @param {*} srcValue The value to match.\r\n * @returns {Function} Returns the new spec function.\r\n */\n\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n\n  return function (object) {\n    var objValue = get(object, path);\n    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;","map":{"version":3,"sources":["C:/Users/Arpan Gandhi/Desktop/Aayush Coding/Website/model_app/frontend/node_modules/lodash/_baseMatchesProperty.js"],"names":["baseIsEqual","require","get","hasIn","isKey","isStrictComparable","matchesStrictComparable","toKey","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","baseMatchesProperty","path","srcValue","object","objValue","undefined","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;AAAA,IACIC,GAAG,GAAGD,OAAO,CAAC,OAAD,CADjB;AAAA,IAEIE,KAAK,GAAGF,OAAO,CAAC,SAAD,CAFnB;AAAA,IAGIG,KAAK,GAAGH,OAAO,CAAC,UAAD,CAHnB;AAAA,IAIII,kBAAkB,GAAGJ,OAAO,CAAC,uBAAD,CAJhC;AAAA,IAKIK,uBAAuB,GAAGL,OAAO,CAAC,4BAAD,CALrC;AAAA,IAMIM,KAAK,GAAGN,OAAO,CAAC,UAAD,CANnB;AAQA;;;AACA,IAAIO,oBAAoB,GAAG,CAA3B;AAAA,IACIC,sBAAsB,GAAG,CAD7B;AAGA;;;;;;;;;AAQA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,QAAnC,EAA6C;AAC3C,MAAIR,KAAK,CAACO,IAAD,CAAL,IAAeN,kBAAkB,CAACO,QAAD,CAArC,EAAiD;AAC/C,WAAON,uBAAuB,CAACC,KAAK,CAACI,IAAD,CAAN,EAAcC,QAAd,CAA9B;AACD;;AACD,SAAO,UAASC,MAAT,EAAiB;AACtB,QAAIC,QAAQ,GAAGZ,GAAG,CAACW,MAAD,EAASF,IAAT,CAAlB;AACA,WAAQG,QAAQ,KAAKC,SAAb,IAA0BD,QAAQ,KAAKF,QAAxC,GACHT,KAAK,CAACU,MAAD,EAASF,IAAT,CADF,GAEHX,WAAW,CAACY,QAAD,EAAWE,QAAX,EAAqBN,oBAAoB,GAAGC,sBAA5C,CAFf;AAGD,GALD;AAMD;;AAEDO,MAAM,CAACC,OAAP,GAAiBP,mBAAjB","sourcesContent":["var baseIsEqual = require('./_baseIsEqual'),\r\n    get = require('./get'),\r\n    hasIn = require('./hasIn'),\r\n    isKey = require('./_isKey'),\r\n    isStrictComparable = require('./_isStrictComparable'),\r\n    matchesStrictComparable = require('./_matchesStrictComparable'),\r\n    toKey = require('./_toKey');\r\n\r\n/** Used to compose bitmasks for value comparisons. */\r\nvar COMPARE_PARTIAL_FLAG = 1,\r\n    COMPARE_UNORDERED_FLAG = 2;\r\n\r\n/**\r\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\r\n *\r\n * @private\r\n * @param {string} path The path of the property to get.\r\n * @param {*} srcValue The value to match.\r\n * @returns {Function} Returns the new spec function.\r\n */\r\nfunction baseMatchesProperty(path, srcValue) {\r\n  if (isKey(path) && isStrictComparable(srcValue)) {\r\n    return matchesStrictComparable(toKey(path), srcValue);\r\n  }\r\n  return function(object) {\r\n    var objValue = get(object, path);\r\n    return (objValue === undefined && objValue === srcValue)\r\n      ? hasIn(object, path)\r\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\r\n  };\r\n}\r\n\r\nmodule.exports = baseMatchesProperty;\r\n"]},"metadata":{},"sourceType":"script"}