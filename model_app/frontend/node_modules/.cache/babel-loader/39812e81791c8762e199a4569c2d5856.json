{"ast":null,"code":"var _jsxFileName = \"/Users/seamonester/Desktop/Easy Access/Delineo/PandemicModel/model_app/frontend/src/components/GoogleMap.js\";\nimport React, { Fragment, Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from 'reactstrap';\nimport GoogleMapReact from 'google-map-react';\nimport SearchBox from './SearchBox.js';\nimport { getPlace } from '../actions/placeActions';\nimport Marker from './Marker.js';\nimport { options } from '../const/placeTypes.js';\nimport Checkbox from './Checkbox.js';\nimport Polygon from './Polygon.js';\n\nclass GoogleMap extends Component {\n  // initialize for autauga county\n  constructor(props) {\n    super(props);\n\n    this.apiHasLoaded = (map, maps) => {\n      this.setState({\n        mapApiLoaded: true,\n        mapInstance: map,\n        mapApi: maps\n      });\n    };\n\n    this.addPlace = place => {\n      this.props.getPlace(place);\n    };\n\n    this.handleCheckboxChange = changeEvent => {\n      const {\n        name\n      } = changeEvent.target;\n      this.setState(prevState => ({\n        checkboxes: { ...prevState.checkboxes,\n          [name]: !prevState.checkboxes[name]\n        }\n      }));\n    };\n\n    this.handleButtonChange = () => {\n      this.setState({\n        editPolygon: !this.state.editPolygon\n      });\n    };\n\n    this.state = {\n      mapApiLoaded: false,\n      mapInstance: null,\n      mapApi: null,\n      checkboxes: options.reduce((options, option) => ({ ...options,\n        [option]: true\n      }), {}),\n      editPolygon: false\n    };\n  } // save Google Maps API in state\n\n\n  // Contains SearchBox, Checkboxes, and Google Map with Marker\n  render() {\n    const {\n      mapApiLoaded,\n      mapInstance,\n      mapApi,\n      checkboxes\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, mapApiLoaded && /*#__PURE__*/React.createElement(SearchBox, {\n      map: mapInstance,\n      mapApi: mapApi,\n      addplace: this.addPlace,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 30\n      }\n    }), options.map(option => /*#__PURE__*/React.createElement(Checkbox, {\n      key: option,\n      isSelected: this.state.checkboxes[option],\n      onCheckboxChange: this.handleCheckboxChange,\n      label: option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 38\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleButtonChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, \"Draw Polygon!\"), mapApiLoaded && /*#__PURE__*/React.createElement(Polygon, {\n      map: mapInstance,\n      mapApi: mapApi,\n      editable: this.state.editPolygon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 30\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100vh',\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: process.env.REACT_APP_MAP_API,\n        libraries: ['places', 'drawing']\n      },\n      defaultCenter: this.props.center,\n      defaultZoom: this.props.zoom,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => this.apiHasLoaded(map, maps),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }, mapApiLoaded && /*#__PURE__*/React.createElement(Marker, {\n      map: mapInstance,\n      mapApi: mapApi,\n      filter: checkboxes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 38\n      }\n    }))));\n  }\n\n}\n\nGoogleMap.defaultProps = {\n  center: {\n    lat: 32,\n    lng: -86\n  },\n  zoom: 10\n};\n\nconst mapStateToProps = state => ({\n  place: state.place\n});\n\nexport default connect(mapStateToProps, {\n  getPlace\n})(GoogleMap);","map":{"version":3,"sources":["/Users/seamonester/Desktop/Easy Access/Delineo/PandemicModel/model_app/frontend/src/components/GoogleMap.js"],"names":["React","Fragment","Component","connect","Button","GoogleMapReact","SearchBox","getPlace","Marker","options","Checkbox","Polygon","GoogleMap","constructor","props","apiHasLoaded","map","maps","setState","mapApiLoaded","mapInstance","mapApi","addPlace","place","handleCheckboxChange","changeEvent","name","target","prevState","checkboxes","handleButtonChange","editPolygon","state","reduce","option","render","height","width","key","process","env","REACT_APP_MAP_API","libraries","center","zoom","defaultProps","lat","lng","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from 'reactstrap';\nimport GoogleMapReact from 'google-map-react';\nimport SearchBox from './SearchBox.js';\nimport { getPlace } from '../actions/placeActions';\nimport Marker from './Marker.js';\nimport {options} from '../const/placeTypes.js';\nimport Checkbox from './Checkbox.js'\nimport Polygon from './Polygon.js';\n\nclass GoogleMap extends Component {\n    // initialize for autauga county\n    static defaultProps = {\n        center: {\n            lat: 32,\n            lng: -86\n        },\n        zoom: 10\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            mapApiLoaded: false,\n            mapInstance: null,\n            mapApi: null,\n            checkboxes: options.reduce((options, option) => ({\n                ...options,\n                [option]: true\n            }), {}),\n            editPolygon: false\n        };\n    }\n\n    // save Google Maps API in state\n    apiHasLoaded = (map, maps) => {\n        this.setState({\n            mapApiLoaded: true,\n            mapInstance: map,\n            mapApi: maps,\n        });\n    };\n\n    // Save to redux store\n    addPlace = (place) => {\n        this.props.getPlace(place);\n    };\n\n    handleCheckboxChange = changeEvent => {\n        const { name } = changeEvent.target;\n\n        this.setState(prevState => ({\n            checkboxes: {\n                ...prevState.checkboxes,\n                [name]: !prevState.checkboxes[name]\n            }\n        }));\n    };\n\n    handleButtonChange = () => {\n        this.setState({\n            editPolygon: !this.state.editPolygon\n        })\n    }\n\n    // Contains SearchBox, Checkboxes, and Google Map with Marker\n    render() {\n        const { mapApiLoaded, mapInstance, mapApi, checkboxes } = this.state;\n\n        return (\n        <Fragment>\n            {mapApiLoaded && <SearchBox map={mapInstance} mapApi={mapApi} addplace={this.addPlace} />}\n            {options.map(option => ( <Checkbox key={option} isSelected={this.state.checkboxes[option]}\n                onCheckboxChange={this.handleCheckboxChange} label = {option}/> ))}\n            <Button onClick={this.handleButtonChange}>Draw Polygon!</Button>\n            {mapApiLoaded && <Polygon map={mapInstance} mapApi={mapApi} editable={this.state.editPolygon} />}\n            <div style={{ height: '100vh', width: '100%' }}>\n                <GoogleMapReact\n                    bootstrapURLKeys={{ key: process.env.REACT_APP_MAP_API,\n                                        libraries: ['places', 'drawing'] }}\n                    defaultCenter={this.props.center}\n                    defaultZoom={this.props.zoom}\n                    yesIWantToUseGoogleMapApiInternals\n                    onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps)}\n                >\n                    {mapApiLoaded && <Marker map={mapInstance} mapApi={mapApi} filter={checkboxes}/>}\n                </GoogleMapReact>\n            </div>\n        </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    place: state.place\n});\n\nexport default connect(mapStateToProps, {getPlace})(GoogleMap);"]},"metadata":{},"sourceType":"module"}