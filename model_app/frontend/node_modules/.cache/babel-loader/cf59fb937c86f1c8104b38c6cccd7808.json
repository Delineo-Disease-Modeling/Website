{"ast":null,"code":"import PropTypes from 'prop-types';\nimport chainPropTypes from './chainPropTypes';\n\nfunction isClassComponent(elementType) {\n  // elementType.prototype?.isReactComponent\n  var _elementType$prototyp = elementType.prototype,\n      prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;\n  return Boolean(prototype.isReactComponent);\n}\n\nfunction acceptingRef(props, propName, componentName, location, propFullName) {\n  var element = props[propName];\n  var safePropName = propFullName || propName;\n\n  if (element == null) {\n    return null;\n  }\n\n  var warningHint;\n  var elementType = element.type;\n  /**\r\n   * Blacklisting instead of whitelisting\r\n   *\r\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\r\n   * trigger a warning in React.\r\n   * We can't whitelist because there is no safe way to detect React.forwardRef\r\n   * or class components. \"Safe\" means there's no public API.\r\n   *\r\n   */\n\n  if (typeof elementType === 'function' && !isClassComponent(elementType)) {\n    warningHint = 'Did you accidentally use a plain function component for an element instead?';\n  }\n\n  if (warningHint !== undefined) {\n    return new Error(\"Invalid \".concat(location, \" `\").concat(safePropName, \"` supplied to `\").concat(componentName, \"`. \") + \"Expected an element that can hold a ref. \".concat(warningHint, \" \") + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');\n  }\n\n  return null;\n}\n\nvar elementAcceptingRef = chainPropTypes(PropTypes.element, acceptingRef);\nelementAcceptingRef.isRequired = chainPropTypes(PropTypes.element.isRequired, acceptingRef);\nexport default elementAcceptingRef;","map":{"version":3,"sources":["C:/Users/totti/Documents/jhu class/delineo/Website/model_app/frontend/node_modules/@material-ui/utils/esm/elementAcceptingRef.js"],"names":["PropTypes","chainPropTypes","isClassComponent","elementType","_elementType$prototyp","prototype","Boolean","isReactComponent","acceptingRef","props","propName","componentName","location","propFullName","element","safePropName","warningHint","type","undefined","Error","concat","elementAcceptingRef","isRequired"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,SAASC,gBAAT,CAA0BC,WAA1B,EAAuC;AACrC;AACA,MAAIC,qBAAqB,GAAGD,WAAW,CAACE,SAAxC;AAAA,MACIA,SAAS,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,EAAnC,GAAwCA,qBADxD;AAEA,SAAOE,OAAO,CAACD,SAAS,CAACE,gBAAX,CAAd;AACD;;AAED,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuCC,aAAvC,EAAsDC,QAAtD,EAAgEC,YAAhE,EAA8E;AAC5E,MAAIC,OAAO,GAAGL,KAAK,CAACC,QAAD,CAAnB;AACA,MAAIK,YAAY,GAAGF,YAAY,IAAIH,QAAnC;;AAEA,MAAII,OAAO,IAAI,IAAf,EAAqB;AACnB,WAAO,IAAP;AACD;;AAED,MAAIE,WAAJ;AACA,MAAIb,WAAW,GAAGW,OAAO,CAACG,IAA1B;AACA;;;;;;;;;;AAUA,MAAI,OAAOd,WAAP,KAAuB,UAAvB,IAAqC,CAACD,gBAAgB,CAACC,WAAD,CAA1D,EAAyE;AACvEa,IAAAA,WAAW,GAAG,6EAAd;AACD;;AAED,MAAIA,WAAW,KAAKE,SAApB,EAA+B;AAC7B,WAAO,IAAIC,KAAJ,CAAU,WAAWC,MAAX,CAAkBR,QAAlB,EAA4B,IAA5B,EAAkCQ,MAAlC,CAAyCL,YAAzC,EAAuD,iBAAvD,EAA0EK,MAA1E,CAAiFT,aAAjF,EAAgG,KAAhG,IAAyG,4CAA4CS,MAA5C,CAAmDJ,WAAnD,EAAgE,GAAhE,CAAzG,GAAgL,2EAA1L,CAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAED,IAAIK,mBAAmB,GAAGpB,cAAc,CAACD,SAAS,CAACc,OAAX,EAAoBN,YAApB,CAAxC;AACAa,mBAAmB,CAACC,UAApB,GAAiCrB,cAAc,CAACD,SAAS,CAACc,OAAV,CAAkBQ,UAAnB,EAA+Bd,YAA/B,CAA/C;AACA,eAAea,mBAAf","sourcesContent":["import PropTypes from 'prop-types';\r\nimport chainPropTypes from './chainPropTypes';\r\n\r\nfunction isClassComponent(elementType) {\r\n  // elementType.prototype?.isReactComponent\r\n  var _elementType$prototyp = elementType.prototype,\r\n      prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;\r\n  return Boolean(prototype.isReactComponent);\r\n}\r\n\r\nfunction acceptingRef(props, propName, componentName, location, propFullName) {\r\n  var element = props[propName];\r\n  var safePropName = propFullName || propName;\r\n\r\n  if (element == null) {\r\n    return null;\r\n  }\r\n\r\n  var warningHint;\r\n  var elementType = element.type;\r\n  /**\r\n   * Blacklisting instead of whitelisting\r\n   *\r\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\r\n   * trigger a warning in React.\r\n   * We can't whitelist because there is no safe way to detect React.forwardRef\r\n   * or class components. \"Safe\" means there's no public API.\r\n   *\r\n   */\r\n\r\n  if (typeof elementType === 'function' && !isClassComponent(elementType)) {\r\n    warningHint = 'Did you accidentally use a plain function component for an element instead?';\r\n  }\r\n\r\n  if (warningHint !== undefined) {\r\n    return new Error(\"Invalid \".concat(location, \" `\").concat(safePropName, \"` supplied to `\").concat(componentName, \"`. \") + \"Expected an element that can hold a ref. \".concat(warningHint, \" \") + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nvar elementAcceptingRef = chainPropTypes(PropTypes.element, acceptingRef);\r\nelementAcceptingRef.isRequired = chainPropTypes(PropTypes.element.isRequired, acceptingRef);\r\nexport default elementAcceptingRef;"]},"metadata":{},"sourceType":"module"}