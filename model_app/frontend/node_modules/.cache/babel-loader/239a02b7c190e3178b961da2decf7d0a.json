{"ast":null,"code":"var assocIndexOf = require('./_assocIndexOf');\n/** Used for built-in method references. */\n\n\nvar arrayProto = Array.prototype;\n/** Built-in value references. */\n\nvar splice = arrayProto.splice;\n/**\r\n * Removes `key` and its value from the list cache.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\n\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n\n  var lastIndex = data.length - 1;\n\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;","map":{"version":3,"sources":["C:/Users/totti/Documents/jhu class/delineo/Website/model_app/frontend/node_modules/lodash/_listCacheDelete.js"],"names":["assocIndexOf","require","arrayProto","Array","prototype","splice","listCacheDelete","key","data","__data__","index","lastIndex","length","pop","call","size","module","exports"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA1B;AAEA;;;AACA,IAAIC,UAAU,GAAGC,KAAK,CAACC,SAAvB;AAEA;;AACA,IAAIC,MAAM,GAAGH,UAAU,CAACG,MAAxB;AAEA;;;;;;;;;;AASA,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;AAC5B,MAAIC,IAAI,GAAG,KAAKC,QAAhB;AAAA,MACIC,KAAK,GAAGV,YAAY,CAACQ,IAAD,EAAOD,GAAP,CADxB;;AAGA,MAAIG,KAAK,GAAG,CAAZ,EAAe;AACb,WAAO,KAAP;AACD;;AACD,MAAIC,SAAS,GAAGH,IAAI,CAACI,MAAL,GAAc,CAA9B;;AACA,MAAIF,KAAK,IAAIC,SAAb,EAAwB;AACtBH,IAAAA,IAAI,CAACK,GAAL;AACD,GAFD,MAEO;AACLR,IAAAA,MAAM,CAACS,IAAP,CAAYN,IAAZ,EAAkBE,KAAlB,EAAyB,CAAzB;AACD;;AACD,IAAE,KAAKK,IAAP;AACA,SAAO,IAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBX,eAAjB","sourcesContent":["var assocIndexOf = require('./_assocIndexOf');\r\n\r\n/** Used for built-in method references. */\r\nvar arrayProto = Array.prototype;\r\n\r\n/** Built-in value references. */\r\nvar splice = arrayProto.splice;\r\n\r\n/**\r\n * Removes `key` and its value from the list cache.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction listCacheDelete(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    return false;\r\n  }\r\n  var lastIndex = data.length - 1;\r\n  if (index == lastIndex) {\r\n    data.pop();\r\n  } else {\r\n    splice.call(data, index, 1);\r\n  }\r\n  --this.size;\r\n  return true;\r\n}\r\n\r\nmodule.exports = listCacheDelete;\r\n"]},"metadata":{},"sourceType":"script"}