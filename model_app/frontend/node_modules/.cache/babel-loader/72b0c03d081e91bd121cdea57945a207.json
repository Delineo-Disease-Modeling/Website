{"ast":null,"code":"/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** Used to detect unsigned integer values. */\n\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n/**\r\n * Checks if `value` is a valid array-like index.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n */\n\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\n\nmodule.exports = isIndex;","map":{"version":3,"sources":["C:/Users/Arpan Gandhi/Desktop/Aayush Coding/Website/model_app/frontend/node_modules/lodash/_isIndex.js"],"names":["MAX_SAFE_INTEGER","reIsUint","isIndex","value","length","type","test","module","exports"],"mappings":"AAAA;AACA,IAAIA,gBAAgB,GAAG,gBAAvB;AAEA;;AACA,IAAIC,QAAQ,GAAG,kBAAf;AAEA;;;;;;;;;AAQA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,MAAIC,IAAI,GAAG,OAAOF,KAAlB;AACAC,EAAAA,MAAM,GAAGA,MAAM,IAAI,IAAV,GAAiBJ,gBAAjB,GAAoCI,MAA7C;AAEA,SAAO,CAAC,CAACA,MAAF,KACJC,IAAI,IAAI,QAAR,IACEA,IAAI,IAAI,QAAR,IAAoBJ,QAAQ,CAACK,IAAT,CAAcH,KAAd,CAFlB,KAGAA,KAAK,GAAG,CAAC,CAAT,IAAcA,KAAK,GAAG,CAAR,IAAa,CAA3B,IAAgCA,KAAK,GAAGC,MAH/C;AAID;;AAEDG,MAAM,CAACC,OAAP,GAAiBN,OAAjB","sourcesContent":["/** Used as references for various `Number` constants. */\r\nvar MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n/** Used to detect unsigned integer values. */\r\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n/**\r\n * Checks if `value` is a valid array-like index.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n */\r\nfunction isIndex(value, length) {\r\n  var type = typeof value;\r\n  length = length == null ? MAX_SAFE_INTEGER : length;\r\n\r\n  return !!length &&\r\n    (type == 'number' ||\r\n      (type != 'symbol' && reIsUint.test(value))) &&\r\n        (value > -1 && value % 1 == 0 && value < length);\r\n}\r\n\r\nmodule.exports = isIndex;\r\n"]},"metadata":{},"sourceType":"script"}