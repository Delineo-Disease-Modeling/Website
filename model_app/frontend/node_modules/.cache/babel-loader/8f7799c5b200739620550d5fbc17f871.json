{"ast":null,"code":"var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    cacheHas = require('./_cacheHas'),\n    createSet = require('./_createSet'),\n    setToArray = require('./_setToArray');\n/** Used as the size to enable large array optimizations. */\n\n\nvar LARGE_ARRAY_SIZE = 200;\n/**\r\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {Function} [iteratee] The iteratee invoked per element.\r\n * @param {Function} [comparator] The comparator invoked per element.\r\n * @returns {Array} Returns the new duplicate free array.\r\n */\n\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  } else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n\n    if (set) {\n      return setToArray(set);\n    }\n\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache();\n  } else {\n    seen = iteratee ? [] : result;\n  }\n\n  outer: while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n    value = comparator || value !== 0 ? value : 0;\n\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n\n      if (iteratee) {\n        seen.push(computed);\n      }\n\n      result.push(value);\n    } else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = baseUniq;","map":{"version":3,"sources":["C:/Users/Arpan Gandhi/Desktop/Aayush Coding/Website/model_app/frontend/node_modules/lodash/_baseUniq.js"],"names":["SetCache","require","arrayIncludes","arrayIncludesWith","cacheHas","createSet","setToArray","LARGE_ARRAY_SIZE","baseUniq","array","iteratee","comparator","index","includes","length","isCommon","result","seen","set","outer","value","computed","seenIndex","push","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;AAAA,IACIC,aAAa,GAAGD,OAAO,CAAC,kBAAD,CAD3B;AAAA,IAEIE,iBAAiB,GAAGF,OAAO,CAAC,sBAAD,CAF/B;AAAA,IAGIG,QAAQ,GAAGH,OAAO,CAAC,aAAD,CAHtB;AAAA,IAIII,SAAS,GAAGJ,OAAO,CAAC,cAAD,CAJvB;AAAA,IAKIK,UAAU,GAAGL,OAAO,CAAC,eAAD,CALxB;AAOA;;;AACA,IAAIM,gBAAgB,GAAG,GAAvB;AAEA;;;;;;;;;;AASA,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCC,UAAnC,EAA+C;AAC7C,MAAIC,KAAK,GAAG,CAAC,CAAb;AAAA,MACIC,QAAQ,GAAGX,aADf;AAAA,MAEIY,MAAM,GAAGL,KAAK,CAACK,MAFnB;AAAA,MAGIC,QAAQ,GAAG,IAHf;AAAA,MAIIC,MAAM,GAAG,EAJb;AAAA,MAKIC,IAAI,GAAGD,MALX;;AAOA,MAAIL,UAAJ,EAAgB;AACdI,IAAAA,QAAQ,GAAG,KAAX;AACAF,IAAAA,QAAQ,GAAGV,iBAAX;AACD,GAHD,MAIK,IAAIW,MAAM,IAAIP,gBAAd,EAAgC;AACnC,QAAIW,GAAG,GAAGR,QAAQ,GAAG,IAAH,GAAUL,SAAS,CAACI,KAAD,CAArC;;AACA,QAAIS,GAAJ,EAAS;AACP,aAAOZ,UAAU,CAACY,GAAD,CAAjB;AACD;;AACDH,IAAAA,QAAQ,GAAG,KAAX;AACAF,IAAAA,QAAQ,GAAGT,QAAX;AACAa,IAAAA,IAAI,GAAG,IAAIjB,QAAJ,EAAP;AACD,GARI,MASA;AACHiB,IAAAA,IAAI,GAAGP,QAAQ,GAAG,EAAH,GAAQM,MAAvB;AACD;;AACDG,EAAAA,KAAK,EACL,OAAO,EAAEP,KAAF,GAAUE,MAAjB,EAAyB;AACvB,QAAIM,KAAK,GAAGX,KAAK,CAACG,KAAD,CAAjB;AAAA,QACIS,QAAQ,GAAGX,QAAQ,GAAGA,QAAQ,CAACU,KAAD,CAAX,GAAqBA,KAD5C;AAGAA,IAAAA,KAAK,GAAIT,UAAU,IAAIS,KAAK,KAAK,CAAzB,GAA8BA,KAA9B,GAAsC,CAA9C;;AACA,QAAIL,QAAQ,IAAIM,QAAQ,KAAKA,QAA7B,EAAuC;AACrC,UAAIC,SAAS,GAAGL,IAAI,CAACH,MAArB;;AACA,aAAOQ,SAAS,EAAhB,EAAoB;AAClB,YAAIL,IAAI,CAACK,SAAD,CAAJ,KAAoBD,QAAxB,EAAkC;AAChC,mBAASF,KAAT;AACD;AACF;;AACD,UAAIT,QAAJ,EAAc;AACZO,QAAAA,IAAI,CAACM,IAAL,CAAUF,QAAV;AACD;;AACDL,MAAAA,MAAM,CAACO,IAAP,CAAYH,KAAZ;AACD,KAXD,MAYK,IAAI,CAACP,QAAQ,CAACI,IAAD,EAAOI,QAAP,EAAiBV,UAAjB,CAAb,EAA2C;AAC9C,UAAIM,IAAI,KAAKD,MAAb,EAAqB;AACnBC,QAAAA,IAAI,CAACM,IAAL,CAAUF,QAAV;AACD;;AACDL,MAAAA,MAAM,CAACO,IAAP,CAAYH,KAAZ;AACD;AACF;;AACD,SAAOJ,MAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBjB,QAAjB","sourcesContent":["var SetCache = require('./_SetCache'),\r\n    arrayIncludes = require('./_arrayIncludes'),\r\n    arrayIncludesWith = require('./_arrayIncludesWith'),\r\n    cacheHas = require('./_cacheHas'),\r\n    createSet = require('./_createSet'),\r\n    setToArray = require('./_setToArray');\r\n\r\n/** Used as the size to enable large array optimizations. */\r\nvar LARGE_ARRAY_SIZE = 200;\r\n\r\n/**\r\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {Function} [iteratee] The iteratee invoked per element.\r\n * @param {Function} [comparator] The comparator invoked per element.\r\n * @returns {Array} Returns the new duplicate free array.\r\n */\r\nfunction baseUniq(array, iteratee, comparator) {\r\n  var index = -1,\r\n      includes = arrayIncludes,\r\n      length = array.length,\r\n      isCommon = true,\r\n      result = [],\r\n      seen = result;\r\n\r\n  if (comparator) {\r\n    isCommon = false;\r\n    includes = arrayIncludesWith;\r\n  }\r\n  else if (length >= LARGE_ARRAY_SIZE) {\r\n    var set = iteratee ? null : createSet(array);\r\n    if (set) {\r\n      return setToArray(set);\r\n    }\r\n    isCommon = false;\r\n    includes = cacheHas;\r\n    seen = new SetCache;\r\n  }\r\n  else {\r\n    seen = iteratee ? [] : result;\r\n  }\r\n  outer:\r\n  while (++index < length) {\r\n    var value = array[index],\r\n        computed = iteratee ? iteratee(value) : value;\r\n\r\n    value = (comparator || value !== 0) ? value : 0;\r\n    if (isCommon && computed === computed) {\r\n      var seenIndex = seen.length;\r\n      while (seenIndex--) {\r\n        if (seen[seenIndex] === computed) {\r\n          continue outer;\r\n        }\r\n      }\r\n      if (iteratee) {\r\n        seen.push(computed);\r\n      }\r\n      result.push(value);\r\n    }\r\n    else if (!includes(seen, computed, comparator)) {\r\n      if (seen !== result) {\r\n        seen.push(computed);\r\n      }\r\n      result.push(value);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = baseUniq;\r\n"]},"metadata":{},"sourceType":"script"}