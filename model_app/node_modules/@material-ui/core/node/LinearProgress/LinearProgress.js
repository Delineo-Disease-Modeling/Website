"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _utils = require("@material-ui/utils");

var _unstyled = require("@material-ui/unstyled");

var _styledEngine = require("@material-ui/styled-engine");

var _capitalize = _interopRequireDefault(require("../utils/capitalize"));

var _colorManipulator = require("../styles/colorManipulator");

var _useTheme = _interopRequireDefault(require("../styles/useTheme"));

var _experimentalStyled = _interopRequireDefault(require("../styles/experimentalStyled"));

var _useThemeProps = _interopRequireDefault(require("../styles/useThemeProps"));

var _linearProgressClasses = _interopRequireWildcard(require("./linearProgressClasses"));

var _jsxRuntime = require("react/jsx-runtime");

const TRANSITION_DURATION = 4; // seconds

const indeterminate1Keyframe = (0, _styledEngine.keyframes)`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`;
const indeterminate2Keyframe = (0, _styledEngine.keyframes)`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`;
const bufferKeyframe = (0, _styledEngine.keyframes)`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`;

const overridesResolver = (props, styles) => {
  const {
    styleProps
  } = props;
  return (0, _utils.deepmerge)(styles.root || {}, (0, _extends2.default)({}, styles[`color${(0, _capitalize.default)(styleProps.color)}`], styles[styleProps.variant], {
    [`& .${_linearProgressClasses.default.dashed}`]: styleProps.variant === 'buffer' && (0, _extends2.default)({}, styles.dashed, styles[`dashedColor${(0, _capitalize.default)(styleProps.color)}`]),
    [`& .${_linearProgressClasses.default.bar}`]: (0, _extends2.default)({}, styles.bar, styles[`barColor${(0, _capitalize.default)(styleProps.color)}`]),
    [`& .${_linearProgressClasses.default.bar1Indeterminate}`]: (styleProps.variant === 'indeterminate' || styleProps.variant === 'query') && styles.bar1Indeterminate,
    [`& .${_linearProgressClasses.default.bar1Determinate}`]: styleProps.variant === 'determinate' && styles.bar1Determinate,
    [`& .${_linearProgressClasses.default.bar1Buffer}`]: styleProps.variant === 'buffer' && styles.bar1Buffer,
    [`& .${_linearProgressClasses.default.bar2Indeterminate}`]: (styleProps.variant === 'indeterminate' || styleProps.variant === 'query') && styles.bar2Indeterminate,
    [`& .${_linearProgressClasses.default.bar2Buffer}`]: styleProps.variant === 'buffer' && styles.bar2Buffer
  }));
};

const useUtilityClasses = styleProps => {
  const {
    classes,
    variant,
    color
  } = styleProps;
  const slots = {
    root: ['root', `color${(0, _capitalize.default)(color)}`, variant],
    dashed: ['dashed', `dashedColor${(0, _capitalize.default)(color)}`],
    bar1: ['bar', `barColor${(0, _capitalize.default)(color)}`, (variant === 'indeterminate' || variant === 'query') && 'bar1Indeterminate', variant === 'determinate' && 'bar1Determinate', variant === 'buffer' && 'bar1Buffer'],
    bar2: ['bar', variant !== 'buffer' && `barColor${(0, _capitalize.default)(color)}`, variant === 'buffer' && `color${(0, _capitalize.default)(color)}`, (variant === 'indeterminate' || variant === 'query') && 'bar2Indeterminate', variant === 'buffer' && 'bar2Buffer']
  };
  return (0, _unstyled.unstable_composeClasses)(slots, _linearProgressClasses.getLinearProgressUtilityClass, classes);
};

const getColorShade = (theme, color) => theme.palette.mode === 'light' ? (0, _colorManipulator.lighten)(theme.palette[color].main, 0.62) : (0, _colorManipulator.darken)(theme.palette[color].main, 0.5);

const LinearProgressRoot = (0, _experimentalStyled.default)('span', {}, {
  name: 'MuiLinearProgress',
  slot: 'Root',
  overridesResolver
})(({
  styleProps,
  theme
}) => (0, _extends2.default)({
  /* Styles applied to the root element. */
  position: 'relative',
  overflow: 'hidden',
  display: 'block',
  height: 4,
  zIndex: 0,
  // Fix Safari's bug during composition of different paint.
  '@media print': {
    colorAdjust: 'exact'
  },
  backgroundColor: getColorShade(theme, styleProps.color)
}, styleProps.variant === 'buffer' && {
  backgroundColor: 'transparent'
}, styleProps.variant === 'query' && {
  transform: 'rotate(180deg)'
}));
const LinearProgressDashed = (0, _experimentalStyled.default)('span', {}, {
  name: 'MuiLinearProgress',
  slot: 'Dashed'
})(({
  styleProps,
  theme
}) => {
  const backgroundColor = getColorShade(theme, styleProps.color);
  return {
    /* Styles applied to the additional bar element if `variant="buffer"`. */
    position: 'absolute',
    marginTop: 0,
    height: '100%',
    width: '100%',
    backgroundImage: `radial-gradient(${backgroundColor} 0%, ${backgroundColor} 16%, transparent 42%)`,
    backgroundSize: '10px 10px',
    backgroundPosition: '0 -23px'
  };
}, (0, _styledEngine.css)`
    animation: ${bufferKeyframe} 3s infinite linear;
  `);
const LinearProgressBar1 = (0, _experimentalStyled.default)('span', {}, {
  name: 'MuiLinearProgress',
  slot: 'Bar1'
})(({
  styleProps,
  theme
}) => (0, _extends2.default)({
  /* Styles applied to the additional bar element if `variant="buffer"`. */
  width: '100%',
  position: 'absolute',
  left: 0,
  bottom: 0,
  top: 0,
  transition: 'transform 0.2s linear',
  transformOrigin: 'left',
  backgroundColor: theme.palette[styleProps.color].main
}, styleProps.variant === 'determinate' && {
  transition: `transform .${TRANSITION_DURATION}s linear`
}, styleProps.variant === 'buffer' && {
  zIndex: 1,
  transition: `transform .${TRANSITION_DURATION}s linear`
}),
/* Styles applied to the bar1 element if `variant="indeterminate or query"`. */
({
  styleProps
}) => (styleProps.variant === 'indeterminate' || styleProps.variant === 'query') && (0, _styledEngine.css)`
      width: auto;
      animation: ${indeterminate1Keyframe} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    `);
const LinearProgressBar2 = (0, _experimentalStyled.default)('span', {}, {
  name: 'MuiLinearProgress',
  slot: 'Bar2'
})(({
  styleProps,
  theme
}) => (0, _extends2.default)({
  /* Styles applied to the additional bar element if `variant="buffer"`. */
  width: '100%',
  position: 'absolute',
  left: 0,
  bottom: 0,
  top: 0,
  transition: 'transform 0.2s linear',
  transformOrigin: 'left'
}, styleProps.variant !== 'buffer' && {
  backgroundColor: theme.palette[styleProps.color].main
}, styleProps.variant === 'buffer' && {
  backgroundColor: getColorShade(theme, styleProps.color),
  transition: `transform .${TRANSITION_DURATION}s linear`
}),
/* Styles applied to the bar1 element if `variant="indeterminate or query"`. */
({
  styleProps
}) => (styleProps.variant === 'indeterminate' || styleProps.variant === 'query') && (0, _styledEngine.css)`
      width: auto;
      animation: ${indeterminate2Keyframe} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
    `);
/**
 * ## ARIA
 *
 * If the progress bar is describing the loading progress of a particular region of a page,
 * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
 * attribute to `true` on that region until it has finished loading.
 */

const LinearProgress = /*#__PURE__*/React.forwardRef(function LinearProgress(inProps, ref) {
  const props = (0, _useThemeProps.default)({
    props: inProps,
    name: 'MuiLinearProgress'
  });
  const {
    className,
    color = 'primary',
    value,
    valueBuffer,
    variant = 'indeterminate'
  } = props,
        other = (0, _objectWithoutPropertiesLoose2.default)(props, ["className", "color", "value", "valueBuffer", "variant"]);
  const styleProps = (0, _extends2.default)({}, props, {
    color,
    variant
  });
  const classes = useUtilityClasses(styleProps);
  const theme = (0, _useTheme.default)();
  const rootProps = {};
  const inlineStyles = {
    bar1: {},
    bar2: {}
  };

  if (variant === 'determinate' || variant === 'buffer') {
    if (value !== undefined) {
      rootProps['aria-valuenow'] = Math.round(value);
      rootProps['aria-valuemin'] = 0;
      rootProps['aria-valuemax'] = 100;
      let transform = value - 100;

      if (theme.direction === 'rtl') {
        transform = -transform;
      }

      inlineStyles.bar1.transform = `translateX(${transform}%)`;
    } else if (process.env.NODE_ENV !== 'production') {
      console.error('Material-UI: You need to provide a value prop ' + 'when using the determinate or buffer variant of LinearProgress .');
    }
  }

  if (variant === 'buffer') {
    if (valueBuffer !== undefined) {
      let transform = (valueBuffer || 0) - 100;

      if (theme.direction === 'rtl') {
        transform = -transform;
      }

      inlineStyles.bar2.transform = `translateX(${transform}%)`;
    } else if (process.env.NODE_ENV !== 'production') {
      console.error('Material-UI: You need to provide a valueBuffer prop ' + 'when using the buffer variant of LinearProgress.');
    }
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(LinearProgressRoot, (0, _extends2.default)({
    className: (0, _clsx.default)(classes.root, className),
    styleProps: styleProps,
    role: "progressbar"
  }, rootProps, {
    ref: ref
  }, other, {
    children: [variant === 'buffer' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(LinearProgressDashed, {
      className: classes.dashed,
      styleProps: styleProps
    }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(LinearProgressBar1, {
      className: classes.bar1,
      styleProps: styleProps,
      style: inlineStyles.bar1
    }), variant === 'determinate' ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)(LinearProgressBar2, {
      className: classes.bar2,
      styleProps: styleProps,
      style: inlineStyles.bar2
    })]
  }));
});
process.env.NODE_ENV !== "production" ? LinearProgress.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: _propTypes.default
  /* @typescript-to-proptypes-ignore */
  .oneOfType([_propTypes.default.oneOf(['primary', 'secondary']), _propTypes.default.string]),

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.object,

  /**
   * The value of the progress indicator for the determinate and buffer variants.
   * Value between 0 and 100.
   */
  value: _propTypes.default.number,

  /**
   * The value for the buffer variant.
   * Value between 0 and 100.
   */
  valueBuffer: _propTypes.default.number,

  /**
   * The variant to use.
   * Use indeterminate or query when there is no progress value.
   * @default 'indeterminate'
   */
  variant: _propTypes.default.oneOf(['buffer', 'determinate', 'indeterminate', 'query'])
} : void 0;
var _default = LinearProgress;
exports.default = _default;