"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("../declarations/global");
/**
 * The Unity Context.
 */
var UnityContext = /** @class */ (function () {
    /**
     * Creates a new instance of the Unity context model.
     * @param {IUnityConfig} unityConfig The Unity config used to build the player.
     */
    function UnityContext(unityConfig) {
        this.unityConfig = unityConfig;
        /**
         * A list of the UnityEvents binded to this unityContext.
         * @private
         * @type {IUnityEvent[]}
         */
        this.unityEvents = [];
        if (typeof window !== "undefined" &&
            typeof window.ReactUnityWebGL === "undefined")
            window.ReactUnityWebGL = {};
    }
    /**
     * Sets the reference of the UnityInstance.
     * @public
     * @param {UnityInstance} unityInstance the target unityInstance.
     */
    UnityContext.prototype.setUnityInstance = function (unityInstance) {
        this.unityInstance = unityInstance;
    };
    /**
     * Quits the Unity Instance and clears it from memory.
     * @public
     */
    UnityContext.prototype.quitUnityInstance = function () {
        var _this = this;
        if (typeof this.unityInstance !== "undefined")
            this.unityInstance.Quit().then(function () {
                _this.dispatchEventListener("quitted");
                _this.unityInstance = undefined;
            });
    };
    /**
     * Sends a message to the UnityInstance to invoke a public method.
     * @public
     * @param {string} gameObjectName the name of the game object in your Unity scene.
     * @param {string} methodName the name of the public method on the game object.
     * @param {string | number | boolean} parameter an optional method parameter.
     */
    UnityContext.prototype.send = function (gameObjectName, methodName, parameter) {
        if (typeof this.unityInstance !== "undefined")
            if (typeof parameter === "undefined")
                this.unityInstance.SendMessage(gameObjectName, methodName);
            else
                this.unityInstance.SendMessage(gameObjectName, methodName, parameter);
    };
    /**
     * Registers an event listener for the Unity player. These can be
     * system events like when the player is initialized or loader and
     * your custom events from Unity.
     * @public
     * @param {string} eventName the event name
     * @param {Function} eventListener the event function
     * @returns {any} The Function
     */
    UnityContext.prototype.on = function (eventName, eventListener) {
        this.unityEvents.push({ eventName: eventName, eventCallback: eventListener });
        if (typeof window !== "undefined")
            window.ReactUnityWebGL[eventName] = function () {
                var parameters = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    parameters[_i] = arguments[_i];
                }
                return eventListener.apply(void 0, parameters);
            };
    };
    /**
     * Dispatches an event listener that has been registered using the on method.
     * @public
     * @param {string} eventName the event name
     * @param {any} eventValue the event value
     */
    UnityContext.prototype.dispatchEventListener = function (eventName, eventValue) {
        for (var _i = 0, _a = this.unityEvents; _i < _a.length; _i++) {
            var _unityEvent = _a[_i];
            if (_unityEvent.eventName === eventName)
                _unityEvent.eventCallback(eventValue);
        }
    };
    /**
     * Enables or disabled the fullscreen mode of the UnityInstance.
     * @public
     * @param {boolean} enabled
     */
    UnityContext.prototype.setFullscreen = function (enabled) {
        if (typeof this.unityInstance !== "undefined")
            this.unityInstance.SetFullscreen(enabled === true ? 1 : 0);
    };
    return UnityContext;
}());
exports.default = UnityContext;
//# sourceMappingURL=unity-context.js.map