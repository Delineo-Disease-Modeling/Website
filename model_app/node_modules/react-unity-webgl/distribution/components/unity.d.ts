import "../declarations/unity-instance";
import "../declarations/global";
import { PureComponent } from "react";
import IUnityProps from "../interfaces/unity-props";
export default class Unity extends PureComponent<IUnityProps, {}> {
    /**
     * The UnityContext passed by the props.
     * @private
     * @type {UnityContext}
     */
    private unityContext;
    /**
     * The UnityLoader service instance.
     * @private
     * @type {UnityLoaderService}
     */
    private unityLoaderService;
    /**
     * A reference to the html canvas element the UnityInstance will use.
     * @private
     * @type {HTMLCanvasElement}
     */
    private htmlCanvasElementReference?;
    /**
     * Event invoked by the UnityInstance when the initialization is progressing.
     * Will be used to track the loading progression and invokes the event listeners
     * for both 'progress' and 'loaded' when the progression hits a value of '1'.
     * @private
     * @param {number} progression
     */
    private onProgress;
    /**
     * Event invoked when the component is mounted. This sets the component
     * reference and starts the mounting of the UnityInstance.
     * @public
     */
    componentDidMount(): void;
    /**
     * Event invoked when the component will unmount. This force quits the
     * UnityInstance which will clear it from the memory.
     * @public
     */
    componentWillUnmount(): void;
    /**
     * Initialized the Unity Loader and mounts the UnityInstance to the component.
     * During this cycle the unity loader service will append the loader script
     * using a new script tag and will continue when the script tag is loaded
     * succesfully. Then the Unity Instance Paramters will be constructed, these
     * consist out of the spreaded provided unityConfig, optional devicePixelRatio
     * and matchWebGLToCanvasSize passed via props. Finally the unity Instance
     * will be created.
     * @private
     * @async
     * @returns {Promise<void>} a promise resolving when Unity loaded correctly.
     */
    private mountUnityInstance;
    /**
     * Renders the unity wrapper and player.
     * @public
     * @returns {React.ReactNode} element
     */
    render(): React.ReactNode;
}
//# sourceMappingURL=unity.d.ts.map