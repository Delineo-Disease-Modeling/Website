"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("../declarations/unity-instance");
require("../declarations/global");
var react_1 = require("react");
var unity_loader_service_1 = __importDefault(require("../services/unity-loader-service"));
var Unity = /** @class */ (function (_super) {
    __extends(Unity, _super);
    function Unity() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * The UnityContext passed by the props.
         * @private
         * @type {UnityContext}
         */
        _this.unityContext = _this.props.unityContext;
        /**
         * The UnityLoader service instance.
         * @private
         * @type {UnityLoaderService}
         */
        _this.unityLoaderService = new unity_loader_service_1.default();
        return _this;
    }
    /**
     * Event invoked by the UnityInstance when the initialization is progressing.
     * Will be used to track the loading progression and invokes the event listeners
     * for both 'progress' and 'loaded' when the progression hits a value of '1'.
     * @private
     * @param {number} progression
     */
    Unity.prototype.onProgress = function (progression) {
        this.unityContext.dispatchEventListener("progress", progression);
        if (progression === 1) {
            this.unityContext.dispatchEventListener("loaded");
            if (typeof this.htmlCanvasElementReference !== "undefined")
                this.unityContext.dispatchEventListener("canvas", this.htmlCanvasElementReference);
        }
    };
    /**
     * Event invoked when the component is mounted. This sets the component
     * reference and starts the mounting of the UnityInstance.
     * @public
     */
    Unity.prototype.componentDidMount = function () {
        this.mountUnityInstance();
    };
    /**
     * Event invoked when the component will unmount. This force quits the
     * UnityInstance which will clear it from the memory.
     * @public
     */
    Unity.prototype.componentWillUnmount = function () {
        this.unityContext.quitUnityInstance();
    };
    /**
     * Initialized the Unity Loader and mounts the UnityInstance to the component.
     * During this cycle the unity loader service will append the loader script
     * using a new script tag and will continue when the script tag is loaded
     * succesfully. Then the Unity Instance Paramters will be constructed, these
     * consist out of the spreaded provided unityConfig, optional devicePixelRatio
     * and matchWebGLToCanvasSize passed via props. Finally the unity Instance
     * will be created.
     * @private
     * @async
     * @returns {Promise<void>} a promise resolving when Unity loaded correctly.
     */
    Unity.prototype.mountUnityInstance = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _unityInstanceParameters, _unityInstance, message_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.unityLoaderService.addFromUrl(this.unityContext.unityConfig.loaderUrl)];
                    case 1:
                        _a.sent();
                        _unityInstanceParameters = __assign(__assign({}, this.unityContext.unityConfig), { printErr: function (message) {
                                return _this.unityContext.dispatchEventListener("error", message);
                            }, print: function (message) {
                                return _this.unityContext.dispatchEventListener("debug", message);
                            } });
                        if (this.props.devicePixelRatio !== undefined)
                            _unityInstanceParameters.devicePixelRatio = this.props.devicePixelRatio;
                        if (this.props.matchWebGLToCanvasSize !== undefined)
                            _unityInstanceParameters.matchWebGLToCanvasSize = this.props.matchWebGLToCanvasSize;
                        return [4 /*yield*/, createUnityInstance(this.htmlCanvasElementReference, _unityInstanceParameters, this.onProgress.bind(this))];
                    case 2:
                        _unityInstance = _a.sent();
                        this.unityContext.setUnityInstance(_unityInstance);
                        return [3 /*break*/, 4];
                    case 3:
                        message_1 = _a.sent();
                        this.unityContext.dispatchEventListener("error", message_1);
                        console.error("A problem occurred while mounting", message_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Renders the unity wrapper and player.
     * @public
     * @returns {React.ReactNode} element
     */
    Unity.prototype.render = function () {
        var _this = this;
        return react_1.createElement("canvas", {
            ref: function (ref) { return (_this.htmlCanvasElementReference = ref); },
            className: this.props.className || "",
            tabIndex: this.props.tabIndex || undefined,
            style: this.props.style || {},
        });
    };
    return Unity;
}(react_1.PureComponent));
exports.default = Unity;
//# sourceMappingURL=unity.js.map