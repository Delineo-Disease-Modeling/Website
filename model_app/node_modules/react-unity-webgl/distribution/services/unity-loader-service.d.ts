export default class UnityLoaderService {
    /**
     * A reference to all UnityLoader script tags and their respective urls.
     * @private
     * @type {Array<{ url: string; htmlScriptElement: HTMLScriptElement; }>}
     */
    private static unityLoaderInstances;
    /**
     * A reference to the document head.
     * @private
     * @type {HTMLHeadElement}
     */
    private documentHead;
    /**
     * Adds the Unity loader script to the window. When a version of the loader
     * is already appended, we'll skip to the validation right away. Before
     * resolving a type check on the createUnityInstance method is done.
     * @public
     * @param {string} url the path to the Unity loader file
     * @returns {Promise<void>} A promise when resolving when the file is loaded succesfulling.
     */
    addFromUrl(url: string): Promise<void>;
    /**
     * Appends a new script tag to the window. The promise resolves when the script
     * is loaded and rejects when it failed to load.
     * @private
     * @param {string} url The url of the script
     * @returns A promise containing the HTML Script Ele,ent
     */
    private appendAndLoadScript;
}
//# sourceMappingURL=unity-loader-service.d.ts.map